
VEEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e54  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002f60  08002f60  00003f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003008  08003008  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003008  08003008  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003008  08003008  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003008  08003008  00004008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003010  08003010  00004010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003014  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000068  0800307c  00005068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  0800307c  0000544c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d0b  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a7  00000000  00000000  00009d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  0000b648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000476  00000000  00000000  0000bc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f29  00000000  00000000  0000c0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000070e7  00000000  00000000  0002500f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008253c  00000000  00000000  0002c0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae632  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e40  00000000  00000000  000ae678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000b04b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f48 	.word	0x08002f48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002f48 	.word	0x08002f48

0800014c <_ZN7VEEPROM4initEh>:

#include "VEEPROM.h"



VEEPROM_Result VEEPROM::init(uint8_t pagesNum) {
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b0c8      	sub	sp, #288	@ 0x120
 8000150:	af00      	add	r7, sp, #0
 8000152:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000156:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800015a:	6018      	str	r0, [r3, #0]
 800015c:	460a      	mov	r2, r1
 800015e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000162:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8000166:	701a      	strb	r2, [r3, #0]

	VEEPROM_Result res = VEEPROM_Result::VEEPROM_OK;
 8000168:	2300      	movs	r3, #0
 800016a:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
	this->pagesNumber = pagesNum+1;
 800016e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000172:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	b2da      	uxtb	r2, r3
 800017c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000180:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	this->sequence.init(pagesNum);
 800018a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800018e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 8000198:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800019c:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	4619      	mov	r1, r3
 80001a4:	4610      	mov	r0, r2
 80001a6:	f000 fdae 	bl	8000d06 <_ZN20StaticCircularBufferIhE4initEh>

	uint8_t activeNumber = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	uint8_t actives[127];
	uint16_t activeMinWear = 0xFFFF;
 80001b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80001b4:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
	uint8_t activeMinWearId;

	uint8_t receivingNumber = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	uint8_t receivings[127];
	uint16_t receivingMinWear = 0xFFFF;
 80001be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80001c2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	uint8_t receivingMinWeatId;


	uint16_t minWear = 0xFFFF;
 80001c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80001ca:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
	uint8_t minWearId;


	for (uint8_t i = 0; i < this->pagesNumber; i++) {
 80001ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80001d2:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80001d6:	2200      	movs	r2, #0
 80001d8:	701a      	strb	r2, [r3, #0]
 80001da:	e14e      	b.n	800047a <_ZN7VEEPROM4initEh+0x32e>
		if (this->isPageCorrect(i)) {
 80001dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80001e0:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80001e4:	781a      	ldrb	r2, [r3, #0]
 80001e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80001ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80001ee:	4611      	mov	r1, r2
 80001f0:	6818      	ldr	r0, [r3, #0]
 80001f2:	f000 fd02 	bl	8000bfa <_ZN7VEEPROM13isPageCorrectEh>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	f000 810a 	beq.w	8000412 <_ZN7VEEPROM4initEh+0x2c6>
			this->pages[i] = this->getPageInfo(i);
 80001fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000202:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000206:	781a      	ldrb	r2, [r3, #0]
 8000208:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800020c:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	461d      	mov	r5, r3
 8000214:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000218:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800021c:	681c      	ldr	r4, [r3, #0]
 800021e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000222:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000226:	4611      	mov	r1, r2
 8000228:	6818      	ldr	r0, [r3, #0]
 800022a:	f000 fd10 	bl	8000c4e <_ZN7VEEPROM11getPageInfoEh>
 800022e:	4603      	mov	r3, r0
 8000230:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

			if (this->pages[i].status == PageStatus::PAGE_ACTIVE) {
 8000234:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000238:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000244:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 800024e:	f24f 02f0 	movw	r2, #61680	@ 0xf0f0
 8000252:	4293      	cmp	r3, r2
 8000254:	d139      	bne.n	80002ca <_ZN7VEEPROM4initEh+0x17e>
				actives[activeNumber] = i;
 8000256:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800025a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800025e:	f5a2 7289 	sub.w	r2, r2, #274	@ 0x112
 8000262:	7812      	ldrb	r2, [r2, #0]
 8000264:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000268:	443b      	add	r3, r7
 800026a:	f803 2c90 	strb.w	r2, [r3, #-144]
				activeNumber++;
 800026e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000272:	3301      	adds	r3, #1
 8000274:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				if (this->pages[i].wear <= activeMinWear) {
 8000278:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800027c:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	4619      	mov	r1, r3
 8000284:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000288:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	008b      	lsls	r3, r1, #2
 8000290:	4413      	add	r3, r2
 8000292:	885b      	ldrh	r3, [r3, #2]
 8000294:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 8000298:	429a      	cmp	r2, r3
 800029a:	d316      	bcc.n	80002ca <_ZN7VEEPROM4initEh+0x17e>
					activeMinWear = this->pages[i].wear;
 800029c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80002a0:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	4619      	mov	r1, r3
 80002a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80002ac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	008b      	lsls	r3, r1, #2
 80002b4:	4413      	add	r3, r2
 80002b6:	885b      	ldrh	r3, [r3, #2]
 80002b8:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
					activeMinWearId = i;
 80002bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80002c0:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
				}
			}

			if (this->pages[i].status == PageStatus::PAGE_RECEIVING) {
 80002ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80002ce:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	461a      	mov	r2, r3
 80002d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80002da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80002e4:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 80002e8:	d139      	bne.n	800035e <_ZN7VEEPROM4initEh+0x212>
				receivings[receivingNumber] = i;
 80002ea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80002ee:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80002f2:	f5a2 7289 	sub.w	r2, r2, #274	@ 0x112
 80002f6:	7811      	ldrb	r1, [r2, #0]
 80002f8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80002fc:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000300:	54d1      	strb	r1, [r2, r3]
				receivingNumber++;
 8000302:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000306:	3301      	adds	r3, #1
 8000308:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
				if (this->pages[i].wear <= receivingMinWear) {
 800030c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000310:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4619      	mov	r1, r3
 8000318:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800031c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	4413      	add	r3, r2
 8000326:	885b      	ldrh	r3, [r3, #2]
 8000328:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800032c:	429a      	cmp	r2, r3
 800032e:	d316      	bcc.n	800035e <_ZN7VEEPROM4initEh+0x212>
					receivingMinWear = this->pages[i].wear;
 8000330:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000334:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	4619      	mov	r1, r3
 800033c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000340:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	4413      	add	r3, r2
 800034a:	885b      	ldrh	r3, [r3, #2]
 800034c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
					receivingMinWeatId = i;
 8000350:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000354:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
				}
			}

			if (this->pages[i].status == PageStatus::PAGE_FULL || this->pages[i].status == PageStatus::PAGE_CLEARED) {
 800035e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000362:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	461a      	mov	r2, r3
 800036a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800036e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000378:	2bff      	cmp	r3, #255	@ 0xff
 800037a:	d010      	beq.n	800039e <_ZN7VEEPROM4initEh+0x252>
 800037c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000380:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	461a      	mov	r2, r3
 8000388:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800038c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000396:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800039a:	4293      	cmp	r3, r2
 800039c:	d10c      	bne.n	80003b8 <_ZN7VEEPROM4initEh+0x26c>
				this->sequence.push_overwrite(i);
 800039e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80003a2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80003ac:	f107 020e 	add.w	r2, r7, #14
 80003b0:	4611      	mov	r1, r2
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fcb7 	bl	8000d26 <_ZN20StaticCircularBufferIhE14push_overwriteERKh>
			}

			if (this->pages[i].wear < minWear) {
 80003b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80003bc:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	4619      	mov	r1, r3
 80003c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80003c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	008b      	lsls	r3, r1, #2
 80003d0:	4413      	add	r3, r2
 80003d2:	885b      	ldrh	r3, [r3, #2]
 80003d4:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 80003d8:	429a      	cmp	r2, r3
 80003da:	d942      	bls.n	8000462 <_ZN7VEEPROM4initEh+0x316>
				minWear = this->pages[i].wear;
 80003dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80003e0:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4619      	mov	r1, r3
 80003e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80003ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	008b      	lsls	r3, r1, #2
 80003f4:	4413      	add	r3, r2
 80003f6:	885b      	ldrh	r3, [r3, #2]
 80003f8:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
				minWearId = i;
 80003fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000400:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000404:	781a      	ldrb	r2, [r3, #0]
 8000406:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800040a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800040e:	701a      	strb	r2, [r3, #0]
 8000410:	e027      	b.n	8000462 <_ZN7VEEPROM4initEh+0x316>
			}

		} else {
			this->initPage(i);
 8000412:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000416:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800041a:	781a      	ldrb	r2, [r3, #0]
 800041c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000420:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000424:	4611      	mov	r1, r2
 8000426:	6818      	ldr	r0, [r3, #0]
 8000428:	f000 fba5 	bl	8000b76 <_ZN7VEEPROM8initPageEh>
			this->pages[i] = this->getPageInfo(i);
 800042c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000430:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000434:	781a      	ldrb	r2, [r3, #0]
 8000436:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800043a:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	461d      	mov	r5, r3
 8000442:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000446:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800044a:	681c      	ldr	r4, [r3, #0]
 800044c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000450:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000454:	4611      	mov	r1, r2
 8000456:	6818      	ldr	r0, [r3, #0]
 8000458:	f000 fbf9 	bl	8000c4e <_ZN7VEEPROM11getPageInfoEh>
 800045c:	4603      	mov	r3, r0
 800045e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
	for (uint8_t i = 0; i < this->pagesNumber; i++) {
 8000462:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000466:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	b2da      	uxtb	r2, r3
 8000470:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000474:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000478:	701a      	strb	r2, [r3, #0]
 800047a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800047e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f893 2200 	ldrb.w	r2, [r3, #512]	@ 0x200
 8000488:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800048c:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	429a      	cmp	r2, r3
 8000494:	f63f aea2 	bhi.w	80001dc <_ZN7VEEPROM4initEh+0x90>
		}
	}


	if (activeNumber > 0) {
 8000498:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800049c:	2b00      	cmp	r3, #0
 800049e:	f000 811a 	beq.w	80006d6 <_ZN7VEEPROM4initEh+0x58a>
		if (activeNumber > 1) {
 80004a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d968      	bls.n	800057c <_ZN7VEEPROM4initEh+0x430>
			for (uint8_t i = 0; i < activeNumber; i++) this->setPageStatus(actives[i], PageStatus::PAGE_CLEARED);
 80004aa:	2300      	movs	r3, #0
 80004ac:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 80004b0:	e014      	b.n	80004dc <_ZN7VEEPROM4initEh+0x390>
 80004b2:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80004b6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80004ba:	443b      	add	r3, r7
 80004bc:	f813 1c90 	ldrb.w	r1, [r3, #-144]
 80004c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80004c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80004c8:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80004cc:	6818      	ldr	r0, [r3, #0]
 80004ce:	f000 fbe0 	bl	8000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>
 80004d2:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80004d6:	3301      	adds	r3, #1
 80004d8:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 80004dc:	f897 2115 	ldrb.w	r2, [r7, #277]	@ 0x115
 80004e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d3e4      	bcc.n	80004b2 <_ZN7VEEPROM4initEh+0x366>
			for (uint8_t i = 0; i < receivingNumber; i++) this->setPageStatus(receivings[i], PageStatus::PAGE_CLEARED);
 80004e8:	2300      	movs	r3, #0
 80004ea:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
 80004ee:	e014      	b.n	800051a <_ZN7VEEPROM4initEh+0x3ce>
 80004f0:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 80004f4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80004f8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80004fc:	5cd1      	ldrb	r1, [r2, r3]
 80004fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000502:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000506:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	f000 fbc1 	bl	8000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>
 8000510:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8000514:	3301      	adds	r3, #1
 8000516:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
 800051a:	f897 2114 	ldrb.w	r2, [r7, #276]	@ 0x114
 800051e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000522:	429a      	cmp	r2, r3
 8000524:	d3e4      	bcc.n	80004f0 <_ZN7VEEPROM4initEh+0x3a4>
			this->pages[minWearId].status = PageStatus::PAGE_ACTIVE;
 8000526:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800052a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	461a      	mov	r2, r3
 8000532:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000536:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f24f 01f0 	movw	r1, #61680	@ 0xf0f0
 8000540:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
			this->setPageStatus(minWearId, PageStatus::PAGE_ACTIVE);
 8000544:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000548:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800054c:	7819      	ldrb	r1, [r3, #0]
 800054e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000552:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000556:	f24f 02f0 	movw	r2, #61680	@ 0xf0f0
 800055a:	6818      	ldr	r0, [r3, #0]
 800055c:	f000 fb99 	bl	8000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>
			this->sequence.push_overwrite(minWearId);
 8000560:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000564:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800056e:	f107 020f 	add.w	r2, r7, #15
 8000572:	4611      	mov	r1, r2
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fbd6 	bl	8000d26 <_ZN20StaticCircularBufferIhE14push_overwriteERKh>
 800057a:	e153      	b.n	8000824 <_ZN7VEEPROM4initEh+0x6d8>
		} else {
			if (receivingNumber > 0) {
 800057c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000580:	2b00      	cmp	r3, #0
 8000582:	f000 809a 	beq.w	80006ba <_ZN7VEEPROM4initEh+0x56e>
				if (receivingNumber > 1) {
 8000586:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800058a:	2b01      	cmp	r3, #1
 800058c:	d937      	bls.n	80005fe <_ZN7VEEPROM4initEh+0x4b2>
					for (uint8_t i = 0; i < receivingNumber; i++) this->setPageStatus(receivings[i], PageStatus::PAGE_CLEARED);
 800058e:	2300      	movs	r3, #0
 8000590:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8000594:	e014      	b.n	80005c0 <_ZN7VEEPROM4initEh+0x474>
 8000596:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 800059a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800059e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80005a2:	5cd1      	ldrb	r1, [r2, r3]
 80005a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80005ac:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80005b0:	6818      	ldr	r0, [r3, #0]
 80005b2:	f000 fb6e 	bl	8000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>
 80005b6:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80005ba:	3301      	adds	r3, #1
 80005bc:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 80005c0:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 80005c4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3e4      	bcc.n	8000596 <_ZN7VEEPROM4initEh+0x44a>
					this->setPageStatus(actives[0], PageStatus::PAGE_ACTIVE);
 80005cc:	f897 1090 	ldrb.w	r1, [r7, #144]	@ 0x90
 80005d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005d4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80005d8:	f24f 02f0 	movw	r2, #61680	@ 0xf0f0
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	f000 fb58 	bl	8000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>
					this->sequence.push_overwrite(actives[0]);
 80005e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80005f0:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fb95 	bl	8000d26 <_ZN20StaticCircularBufferIhE14push_overwriteERKh>
 80005fc:	e112      	b.n	8000824 <_ZN7VEEPROM4initEh+0x6d8>
				} else {
					this->sequence.push_overwrite(actives[0]);
 80005fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000602:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800060c:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fb87 	bl	8000d26 <_ZN20StaticCircularBufferIhE14push_overwriteERKh>

					this->transferPage(actives[0], receivings[0]);
 8000618:	f897 1090 	ldrb.w	r1, [r7, #144]	@ 0x90
 800061c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000620:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800062a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	f000 f9dd 	bl	80009ee <_ZN7VEEPROM12transferPageEhh>
					this->sequence.pop(actives[0]);
 8000634:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000638:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000642:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fba1 	bl	8000d90 <_ZN20StaticCircularBufferIhE3popERh>
					this->setPageStatus(actives[0], PageStatus::PAGE_CLEARED);
 800064e:	f897 1090 	ldrb.w	r1, [r7, #144]	@ 0x90
 8000652:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000656:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800065a:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	f000 fb17 	bl	8000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>

					this->pages[receivings[0]].status = PageStatus::PAGE_ACTIVE;
 8000664:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000668:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000674:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f24f 01f0 	movw	r1, #61680	@ 0xf0f0
 800067e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
					this->setPageStatus(receivings[0], PageStatus::PAGE_ACTIVE);
 8000682:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000686:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800068a:	7819      	ldrb	r1, [r3, #0]
 800068c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000690:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000694:	f24f 02f0 	movw	r2, #61680	@ 0xf0f0
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	f000 fafa 	bl	8000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>
					this->sequence.push_overwrite(receivings[0]);
 800069e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006a2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80006ac:	f107 0210 	add.w	r2, r7, #16
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fb37 	bl	8000d26 <_ZN20StaticCircularBufferIhE14push_overwriteERKh>
 80006b8:	e0b4      	b.n	8000824 <_ZN7VEEPROM4initEh+0x6d8>
				}
			} else {
				this->sequence.push_overwrite(actives[0]);
 80006ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80006c8:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fb29 	bl	8000d26 <_ZN20StaticCircularBufferIhE14push_overwriteERKh>
 80006d4:	e0a6      	b.n	8000824 <_ZN7VEEPROM4initEh+0x6d8>
			}
		}

	} else {
		if (receivingNumber > 0) {
 80006d6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d078      	beq.n	80007d0 <_ZN7VEEPROM4initEh+0x684>
			if (receivingNumber > 1) {
 80006de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d949      	bls.n	800077a <_ZN7VEEPROM4initEh+0x62e>
				for (uint8_t i = 0; i < receivingNumber; i++) this->setPageStatus(receivings[i], PageStatus::PAGE_CLEARED);
 80006e6:	2300      	movs	r3, #0
 80006e8:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
 80006ec:	e014      	b.n	8000718 <_ZN7VEEPROM4initEh+0x5cc>
 80006ee:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 80006f2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006f6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80006fa:	5cd1      	ldrb	r1, [r2, r3]
 80006fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000700:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000704:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	f000 fac2 	bl	8000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>
 800070e:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8000712:	3301      	adds	r3, #1
 8000714:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
 8000718:	f897 2112 	ldrb.w	r2, [r7, #274]	@ 0x112
 800071c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000720:	429a      	cmp	r2, r3
 8000722:	d3e4      	bcc.n	80006ee <_ZN7VEEPROM4initEh+0x5a2>
				this->pages[minWearId].status = PageStatus::PAGE_ACTIVE;
 8000724:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000728:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000734:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f24f 01f0 	movw	r1, #61680	@ 0xf0f0
 800073e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
//				this->formatPage(minWearId);
				this->setPageStatus(minWearId, PageStatus::PAGE_ACTIVE);
 8000742:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000746:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800074a:	7819      	ldrb	r1, [r3, #0]
 800074c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000750:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000754:	f24f 02f0 	movw	r2, #61680	@ 0xf0f0
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f000 fa9a 	bl	8000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>
				this->sequence.push_overwrite(minWearId);
 800075e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000762:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800076c:	f107 020f 	add.w	r2, r7, #15
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fad7 	bl	8000d26 <_ZN20StaticCircularBufferIhE14push_overwriteERKh>
 8000778:	e054      	b.n	8000824 <_ZN7VEEPROM4initEh+0x6d8>
			} else {
				this->pages[receivings[0]].status = PageStatus::PAGE_ACTIVE;
 800077a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800077e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800078a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f24f 01f0 	movw	r1, #61680	@ 0xf0f0
 8000794:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
//				this->formatPage(receivings[0]);
				this->setPageStatus(receivings[0], PageStatus::PAGE_ACTIVE);
 8000798:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800079c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80007a0:	7819      	ldrb	r1, [r3, #0]
 80007a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80007aa:	f24f 02f0 	movw	r2, #61680	@ 0xf0f0
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	f000 fa6f 	bl	8000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>
				this->sequence.push_overwrite(receivings[0]);
 80007b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007b8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80007c2:	f107 0210 	add.w	r2, r7, #16
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 faac 	bl	8000d26 <_ZN20StaticCircularBufferIhE14push_overwriteERKh>
 80007ce:	e029      	b.n	8000824 <_ZN7VEEPROM4initEh+0x6d8>
			}
		} else {
			this->pages[minWearId].status = PageStatus::PAGE_ACTIVE;
 80007d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007d4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007e0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f24f 01f0 	movw	r1, #61680	@ 0xf0f0
 80007ea:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
//			this->formatPage(minWearId);
			this->setPageStatus(minWearId, PageStatus::PAGE_ACTIVE);
 80007ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007f2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80007f6:	7819      	ldrb	r1, [r3, #0]
 80007f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000800:	f24f 02f0 	movw	r2, #61680	@ 0xf0f0
 8000804:	6818      	ldr	r0, [r3, #0]
 8000806:	f000 fa44 	bl	8000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>
			this->sequence.push_overwrite(minWearId);
 800080a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800080e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000818:	f107 020f 	add.w	r2, r7, #15
 800081c:	4611      	mov	r1, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fa81 	bl	8000d26 <_ZN20StaticCircularBufferIhE14push_overwriteERKh>
	}




	return res;
 8000824:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
}
 8000828:	4618      	mov	r0, r3
 800082a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800082e:	46bd      	mov	sp, r7
 8000830:	bdb0      	pop	{r4, r5, r7, pc}

08000832 <_ZN7VEEPROM14findClearPlaceEhPh>:

	return VEEPROM_Result::VEEPROM_ERROR;
}


VEEPROM_Result VEEPROM::findClearPlace(uint8_t pageId, uint8_t* varIndex) {
 8000832:	b480      	push	{r7}
 8000834:	b089      	sub	sp, #36	@ 0x24
 8000836:	af00      	add	r7, sp, #0
 8000838:	60f8      	str	r0, [r7, #12]
 800083a:	460b      	mov	r3, r1
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	72fb      	strb	r3, [r7, #11]
	uint32_t addr = PAGE_START - pageId * PAGE_SIZE;
 8000840:	7afb      	ldrb	r3, [r7, #11]
 8000842:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
 8000846:	333f      	adds	r3, #63	@ 0x3f
 8000848:	029b      	lsls	r3, r3, #10
 800084a:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 1; i < 256; i++) {
 800084c:	2301      	movs	r3, #1
 800084e:	77fb      	strb	r3, [r7, #31]
		uint32_t flashInfo = *(__IO uint32_t*)(addr + i);
 8000850:	7ffa      	ldrb	r2, [r7, #31]
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	4413      	add	r3, r2
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	617b      	str	r3, [r7, #20]
		if (flashInfo == 0x00000000) {
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d104      	bne.n	800086a <_ZN7VEEPROM14findClearPlaceEhPh+0x38>
			*varIndex = i;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7ffa      	ldrb	r2, [r7, #31]
 8000864:	701a      	strb	r2, [r3, #0]
			return VEEPROM_Result::VEEPROM_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	e003      	b.n	8000872 <_ZN7VEEPROM14findClearPlaceEhPh+0x40>
	for (uint8_t i = 1; i < 256; i++) {
 800086a:	7ffb      	ldrb	r3, [r7, #31]
 800086c:	3301      	adds	r3, #1
 800086e:	77fb      	strb	r3, [r7, #31]
		}
	}
 8000870:	e7ee      	b.n	8000850 <_ZN7VEEPROM14findClearPlaceEhPh+0x1e>
	return VEEPROM_Result::VEEPROM_ERROR;
}
 8000872:	4618      	mov	r0, r3
 8000874:	3724      	adds	r7, #36	@ 0x24
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <_ZN7VEEPROM5writeEth>:


VEEPROM_Result VEEPROM::write(uint16_t varId, uint8_t varValue) {
 800087c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	460b      	mov	r3, r1
 8000888:	807b      	strh	r3, [r7, #2]
 800088a:	4613      	mov	r3, r2
 800088c:	707b      	strb	r3, [r7, #1]
//	__disable_irq();
	HAL_FLASH_Unlock();
 800088e:	f000 feb3 	bl	80015f8 <HAL_FLASH_Unlock>

	uint8_t pageId;
	this->sequence.peek_at(pagesNumber-1, &pageId);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f503 7001 	add.w	r0, r3, #516	@ 0x204
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800089e:	3b01      	subs	r3, #1
 80008a0:	4619      	mov	r1, r3
 80008a2:	f107 030a 	add.w	r3, r7, #10
 80008a6:	461a      	mov	r2, r3
 80008a8:	f000 fa9c 	bl	8000de4 <_ZNK20StaticCircularBufferIhE7peek_atEjPh>
	uint32_t addr = PAGE_START - pageId * PAGE_SIZE;
 80008ac:	7abb      	ldrb	r3, [r7, #10]
 80008ae:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
 80008b2:	333f      	adds	r3, #63	@ 0x3f
 80008b4:	029b      	lsls	r3, r3, #10
 80008b6:	60fb      	str	r3, [r7, #12]

	uint8_t varIndex;
	this->findClearPlace(pageId, &varIndex);
 80008b8:	7abb      	ldrb	r3, [r7, #10]
 80008ba:	f107 0209 	add.w	r2, r7, #9
 80008be:	4619      	mov	r1, r3
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ffb6 	bl	8000832 <_ZN7VEEPROM14findClearPlaceEhPh>

	uint8_t checksum = (((uint32_t)varId) << 16 | ((uint32_t)varValue) << 8) ^ 0x00000000;
 80008c6:	2300      	movs	r3, #0
 80008c8:	72fb      	strb	r3, [r7, #11]

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + varIndex, varId);
 80008ca:	7a7b      	ldrb	r3, [r7, #9]
 80008cc:	461a      	mov	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	18d1      	adds	r1, r2, r3
 80008d2:	887b      	ldrh	r3, [r7, #2]
 80008d4:	2200      	movs	r2, #0
 80008d6:	4698      	mov	r8, r3
 80008d8:	4691      	mov	r9, r2
 80008da:	4642      	mov	r2, r8
 80008dc:	464b      	mov	r3, r9
 80008de:	2001      	movs	r0, #1
 80008e0:	f000 fe1a 	bl	8001518 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + varIndex + 2, ((uint16_t)varId) << 8 | checksum);
 80008e4:	7a7b      	ldrb	r3, [r7, #9]
 80008e6:	461a      	mov	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4413      	add	r3, r2
 80008ec:	1c99      	adds	r1, r3, #2
 80008ee:	887b      	ldrh	r3, [r7, #2]
 80008f0:	021a      	lsls	r2, r3, #8
 80008f2:	7afb      	ldrb	r3, [r7, #11]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	17da      	asrs	r2, r3, #31
 80008f8:	461c      	mov	r4, r3
 80008fa:	4615      	mov	r5, r2
 80008fc:	4622      	mov	r2, r4
 80008fe:	462b      	mov	r3, r5
 8000900:	2001      	movs	r0, #1
 8000902:	f000 fe09 	bl	8001518 <HAL_FLASH_Program>

//	__enable_irq();
	HAL_FLASH_Lock();
 8000906:	f000 fe9d 	bl	8001644 <HAL_FLASH_Lock>

	return VEEPROM_Result::VEEPROM_OK;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000916 <_ZN7VEEPROM13transferValueEt>:


VEEPROM_Result VEEPROM::transferValue(uint16_t varId) {
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	460b      	mov	r3, r1
 8000920:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i<this->pagesNumber; i++) {
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e034      	b.n	8000992 <_ZN7VEEPROM13transferValueEt+0x7c>
		uint8_t pageId;
		this->sequence.peek_at(this->pagesNumber-i, &pageId);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f503 7001 	add.w	r0, r3, #516	@ 0x204
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8000934:	461a      	mov	r2, r3
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	4619      	mov	r1, r3
 800093c:	f107 030b 	add.w	r3, r7, #11
 8000940:	461a      	mov	r2, r3
 8000942:	f000 fa4f 	bl	8000de4 <_ZNK20StaticCircularBufferIhE7peek_atEjPh>
		for (int j = 0; j< 255; j++) {
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	e01c      	b.n	8000986 <_ZN7VEEPROM13transferValueEt+0x70>
			uint32_t flashInfo = *(__IO uint32_t*)(PAGE_START - (pageId + 1) * PAGE_SIZE - (j+1) * 4);
 800094c:	7afb      	ldrb	r3, [r7, #11]
 800094e:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
 8000952:	333e      	adds	r3, #62	@ 0x3e
 8000954:	021a      	lsls	r2, r3, #8
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	3301      	adds	r3, #1
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
			if ((uint16_t)flashInfo >> 16 == varId) {		// TODO: checksum
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	b29b      	uxth	r3, r3
 8000966:	141a      	asrs	r2, r3, #16
 8000968:	887b      	ldrh	r3, [r7, #2]
 800096a:	429a      	cmp	r2, r3
 800096c:	d108      	bne.n	8000980 <_ZN7VEEPROM13transferValueEt+0x6a>
				this->write(varId, (uint8_t)flashInfo>>8);
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	121b      	asrs	r3, r3, #8
 8000974:	b2da      	uxtb	r2, r3
 8000976:	887b      	ldrh	r3, [r7, #2]
 8000978:	4619      	mov	r1, r3
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ff7e 	bl	800087c <_ZN7VEEPROM5writeEth>
		for (int j = 0; j< 255; j++) {
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	3301      	adds	r3, #1
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	2bfe      	cmp	r3, #254	@ 0xfe
 800098a:	dddf      	ble.n	800094c <_ZN7VEEPROM13transferValueEt+0x36>
	for (int i = 0; i<this->pagesNumber; i++) {
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	3301      	adds	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8000998:	461a      	mov	r2, r3
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	4293      	cmp	r3, r2
 800099e:	dbc3      	blt.n	8000928 <_ZN7VEEPROM13transferValueEt+0x12>
			}
		}
	}
}
 80009a0:	bf00      	nop
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_Z8containsPttt>:


bool contains(uint16_t arr[], uint16_t arrSize, uint16_t value) {
 80009aa:	b480      	push	{r7}
 80009ac:	b085      	sub	sp, #20
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	460b      	mov	r3, r1
 80009b4:	807b      	strh	r3, [r7, #2]
 80009b6:	4613      	mov	r3, r2
 80009b8:	803b      	strh	r3, [r7, #0]
	for (int i=0; i<arrSize; i++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e00c      	b.n	80009da <_Z8containsPttt+0x30>
		if (arr[i] == value) return true;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	4413      	add	r3, r2
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	883a      	ldrh	r2, [r7, #0]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d101      	bne.n	80009d4 <_Z8containsPttt+0x2a>
 80009d0:	2301      	movs	r3, #1
 80009d2:	e007      	b.n	80009e4 <_Z8containsPttt+0x3a>
	for (int i=0; i<arrSize; i++) {
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3301      	adds	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	887b      	ldrh	r3, [r7, #2]
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	429a      	cmp	r2, r3
 80009e0:	dbee      	blt.n	80009c0 <_Z8containsPttt+0x16>
	}
	return false;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <_ZN7VEEPROM12transferPageEhh>:


VEEPROM_Result VEEPROM::transferPage(uint8_t pageFrom, uint8_t pageTo) {
 80009ee:	b580      	push	{r7, lr}
 80009f0:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80009fa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80009fe:	6018      	str	r0, [r3, #0]
 8000a00:	4608      	mov	r0, r1
 8000a02:	4611      	mov	r1, r2
 8000a04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000a08:	f2a3 231d 	subw	r3, r3, #541	@ 0x21d
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000a14:	f2a3 231e 	subw	r3, r3, #542	@ 0x21e
 8000a18:	460a      	mov	r2, r1
 8000a1a:	701a      	strb	r2, [r3, #0]

	uint32_t addrFrom = PAGE_START - pageFrom * PAGESIZE;
 8000a1c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000a20:	f2a3 231d 	subw	r3, r3, #541	@ 0x21d
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
 8000a2a:	333f      	adds	r3, #63	@ 0x3f
 8000a2c:	029b      	lsls	r3, r3, #10
 8000a2e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t addrTo = PAGE_START - pageTo * PAGESIZE;
 8000a32:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000a36:	f2a3 231e 	subw	r3, r3, #542	@ 0x21e
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
 8000a40:	333f      	adds	r3, #63	@ 0x3f
 8000a42:	029b      	lsls	r3, r3, #10
 8000a44:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

	uint16_t vaddrs[255];
	uint8_t vaadrsNum = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

	for (int i = 0; i < 255; i++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8000a54:	e042      	b.n	8000adc <_ZN7VEEPROM12transferPageEhh+0xee>
		uint32_t flashInfo = *(__IO uint32_t*)(addrFrom + PAGE_SIZE - (i+1) * 4); // TODO: checksum
 8000a56:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	461a      	mov	r2, r3
 8000a60:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a64:	1a9b      	subs	r3, r3, r2
 8000a66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
		if (!(contains(vaddrs, vaadrsNum, (uint16_t)flashInfo>>16))) {
 8000a70:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8000a74:	b299      	uxth	r1, r3
 8000a76:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	141b      	asrs	r3, r3, #16
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff90 	bl	80009aa <_Z8containsPttt>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f083 0301 	eor.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d01d      	beq.n	8000ad2 <_ZN7VEEPROM12transferPageEhh+0xe4>
			vaddrs[vaadrsNum] = (uint16_t)flashInfo>>16;
 8000a96:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	141b      	asrs	r3, r3, #16
 8000a9e:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 8000aa2:	b299      	uxth	r1, r3
 8000aa4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000aa8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000aac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			vaadrsNum++;
 8000ab0:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
			this->transferValue(flashInfo >> 16);
 8000aba:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000abe:	0c1b      	lsrs	r3, r3, #16
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000ac6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8000aca:	4611      	mov	r1, r2
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	f7ff ff22 	bl	8000916 <_ZN7VEEPROM13transferValueEt>
	for (int i = 0; i < 255; i++) {
 8000ad2:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8000adc:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000ae0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ae2:	ddb8      	ble.n	8000a56 <_ZN7VEEPROM12transferPageEhh+0x68>
		}
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_ZN7VEEPROM10formatPageEhPt>:


VEEPROM_Result VEEPROM::formatPage(uint8_t pageId, uint16_t* wear) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	@ 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	460b      	mov	r3, r1
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	72fb      	strb	r3, [r7, #11]
	FLASH_EraseInitTypeDef FlashErase;
	uint32_t pageError = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef status;
	uint32_t addr = PAGE_START - pageId * PAGE_SIZE;
 8000b02:	7afb      	ldrb	r3, [r7, #11]
 8000b04:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
 8000b08:	333f      	adds	r3, #63	@ 0x3f
 8000b0a:	029b      	lsls	r3, r3, #10
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	*wear = (uint16_t)((*(__IO uint32_t*)(addr)>>16) + 1);
 8000b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	0c1b      	lsrs	r3, r3, #16
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	3301      	adds	r3, #1
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	801a      	strh	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1e:	b672      	cpsid	i
}
 8000b20:	bf00      	nop

//	HAL_Delay(10);

	__disable_irq();
	status =  HAL_FLASH_Unlock();
 8000b22:	f000 fd69 	bl	80015f8 <HAL_FLASH_Unlock>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	FlashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
	FlashErase.PageAddress = addr;
 8000b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b32:	623b      	str	r3, [r7, #32]
	FlashErase.NbPages = 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_FLASHEx_Erase(&FlashErase, &pageError) != HAL_OK)
 8000b38:	f107 0214 	add.w	r2, r7, #20
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fe40 	bl	80017c8 <HAL_FLASHEx_Erase>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf14      	ite	ne
 8000b4e:	2301      	movne	r3, #1
 8000b50:	2300      	moveq	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d005      	beq.n	8000b64 <_ZN7VEEPROM10formatPageEhPt+0x74>
	{
		HAL_FLASH_Lock();
 8000b58:	f000 fd74 	bl	8001644 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b5c:	b662      	cpsie	i
}
 8000b5e:	bf00      	nop
		__enable_irq();
		return VEEPROM_Result::VEEPROM_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e004      	b.n	8000b6e <_ZN7VEEPROM10formatPageEhPt+0x7e>
	}

//	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, PageStatus::PAGE_CLEARED);
//	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr+2, uses+1);
	HAL_FLASH_Lock();
 8000b64:	f000 fd6e 	bl	8001644 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b68:	b662      	cpsie	i
}
 8000b6a:	bf00      	nop
	__enable_irq();

	return VEEPROM_Result::VEEPROM_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3730      	adds	r7, #48	@ 0x30
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_ZN7VEEPROM8initPageEh>:


VEEPROM_Result VEEPROM::initPage(uint8_t pageId) {
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b088      	sub	sp, #32
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	70fb      	strb	r3, [r7, #3]
	uint32_t addr = PAGE_START - pageId * PAGE_SIZE;
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
 8000b88:	333f      	adds	r3, #63	@ 0x3f
 8000b8a:	029b      	lsls	r3, r3, #10
 8000b8c:	61fb      	str	r3, [r7, #28]

	FLASH_EraseInitTypeDef FlashErase;
	uint32_t pageError = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]

//	__disable_irq();
	HAL_FLASH_Unlock();
 8000b92:	f000 fd31 	bl	80015f8 <HAL_FLASH_Unlock>
	FlashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
	FlashErase.PageAddress = addr;
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	617b      	str	r3, [r7, #20]
	FlashErase.NbPages = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61bb      	str	r3, [r7, #24]
	if (HAL_FLASHEx_Erase(&FlashErase, &pageError) != HAL_OK)
 8000ba2:	f107 0208 	add.w	r2, r7, #8
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fe0b 	bl	80017c8 <HAL_FLASHEx_Erase>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf14      	ite	ne
 8000bb8:	2301      	movne	r3, #1
 8000bba:	2300      	moveq	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <_ZN7VEEPROM8initPageEh+0x54>
	{
		HAL_FLASH_Lock();
 8000bc2:	f000 fd3f 	bl	8001644 <HAL_FLASH_Lock>
//		__enable_irq();
		return VEEPROM_Result::VEEPROM_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e013      	b.n	8000bf2 <_ZN7VEEPROM8initPageEh+0x7c>
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, PageStatus::PAGE_CLEARED);
 8000bca:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8000bce:	f04f 0300 	mov.w	r3, #0
 8000bd2:	69f9      	ldr	r1, [r7, #28]
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 fc9f 	bl	8001518 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr+2, 0x0001);
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	1c99      	adds	r1, r3, #2
 8000bde:	f04f 0201 	mov.w	r2, #1
 8000be2:	f04f 0300 	mov.w	r3, #0
 8000be6:	2001      	movs	r0, #1
 8000be8:	f000 fc96 	bl	8001518 <HAL_FLASH_Program>
//	__enable_irq();
	HAL_FLASH_Lock();
 8000bec:	f000 fd2a 	bl	8001644 <HAL_FLASH_Lock>

	return VEEPROM_Result::VEEPROM_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3720      	adds	r7, #32
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_ZN7VEEPROM13isPageCorrectEh>:


bool VEEPROM::isPageCorrect(uint8_t pageId) {
 8000bfa:	b480      	push	{r7}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	460b      	mov	r3, r1
 8000c04:	70fb      	strb	r3, [r7, #3]
	uint32_t flashInfo = *(__IO uint32_t*)(PAGE_START - pageId * PAGE_SIZE);
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
 8000c0c:	333f      	adds	r3, #63	@ 0x3f
 8000c0e:	029b      	lsls	r3, r3, #10
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	60fb      	str	r3, [r7, #12]
	if (((uint16_t)flashInfo == 0x00FF) || ((uint16_t)flashInfo == 0xFF00) ||
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	2bff      	cmp	r3, #255	@ 0xff
 8000c1a:	d010      	beq.n	8000c3e <_ZN7VEEPROM13isPageCorrectEh+0x44>
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8000c24:	d00b      	beq.n	8000c3e <_ZN7VEEPROM13isPageCorrectEh+0x44>
			((uint16_t)flashInfo == 0x0F0F) || ((uint16_t)flashInfo == 0xF0F0)) {
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	b29b      	uxth	r3, r3
	if (((uint16_t)flashInfo == 0x00FF) || ((uint16_t)flashInfo == 0xFF00) ||
 8000c2a:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d005      	beq.n	8000c3e <_ZN7VEEPROM13isPageCorrectEh+0x44>
			((uint16_t)flashInfo == 0x0F0F) || ((uint16_t)flashInfo == 0xF0F0)) {
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	f24f 02f0 	movw	r2, #61680	@ 0xf0f0
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d101      	bne.n	8000c42 <_ZN7VEEPROM13isPageCorrectEh+0x48>
		return true;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <_ZN7VEEPROM13isPageCorrectEh+0x4a>
	}
	return false;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr

08000c4e <_ZN7VEEPROM11getPageInfoEh>:


PageInfo VEEPROM::getPageInfo(uint8_t pageId) {
 8000c4e:	b480      	push	{r7}
 8000c50:	b087      	sub	sp, #28
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	460b      	mov	r3, r1
 8000c58:	70fb      	strb	r3, [r7, #3]

	PageInfo info;
	uint32_t flashInfo = *(__IO uint32_t*)(PAGE_START - pageId * PAGE_SIZE);
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
 8000c60:	333f      	adds	r3, #63	@ 0x3f
 8000c62:	029b      	lsls	r3, r3, #10
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	617b      	str	r3, [r7, #20]

	info.status = (PageStatus)flashInfo;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	81bb      	strh	r3, [r7, #12]
	info.wear = (uint16_t)(flashInfo >> 16);
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	0c1b      	lsrs	r3, r3, #16
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	81fb      	strh	r3, [r7, #14]

	return info;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	8a3a      	ldrh	r2, [r7, #16]
 8000c7e:	f362 030f 	bfi	r3, r2, #0, #16
 8000c82:	8a7a      	ldrh	r2, [r7, #18]
 8000c84:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <_ZN7VEEPROM13setPageStatusEh10PageStatus>:


VEEPROM_Result VEEPROM::setPageStatus(uint8_t pageId, PageStatus status) {
 8000c92:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	803b      	strh	r3, [r7, #0]
	uint32_t addr = PAGE_START - pageId * PAGE_SIZE;
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
 8000caa:	333f      	adds	r3, #63	@ 0x3f
 8000cac:	029b      	lsls	r3, r3, #10
 8000cae:	617b      	str	r3, [r7, #20]

	uint16_t* wear;
	this->formatPage(pageId, wear);
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff1a 	bl	8000af0 <_ZN7VEEPROM10formatPageEhPt>

//	__disable_irq();
	HAL_FLASH_Unlock();
 8000cbc:	f000 fc9c 	bl	80015f8 <HAL_FLASH_Unlock>

	HAL_StatusTypeDef res;
	res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, (uint16_t)status);
 8000cc0:	883b      	ldrh	r3, [r7, #0]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	4691      	mov	r9, r2
 8000cc8:	4642      	mov	r2, r8
 8000cca:	464b      	mov	r3, r9
 8000ccc:	6979      	ldr	r1, [r7, #20]
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f000 fc22 	bl	8001518 <HAL_FLASH_Program>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
	res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr+2, *wear);
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	1c99      	adds	r1, r3, #2
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	461c      	mov	r4, r3
 8000ce6:	4615      	mov	r5, r2
 8000ce8:	4622      	mov	r2, r4
 8000cea:	462b      	mov	r3, r5
 8000cec:	2001      	movs	r0, #1
 8000cee:	f000 fc13 	bl	8001518 <HAL_FLASH_Program>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73fb      	strb	r3, [r7, #15]

	HAL_FLASH_Lock();
 8000cf6:	f000 fca5 	bl	8001644 <HAL_FLASH_Lock>
//	__enable_irq();

	return VEEPROM_Result::VEEPROM_OK;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000d06 <_ZN20StaticCircularBufferIhE4initEh>:
    uint8_t sup;

public:
    StaticCircularBuffer() : head(0), tail(0), item_count(0) {}

    bool init(uint8_t N) {
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70fb      	strb	r3, [r7, #3]
    	this->sup = N;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	78fa      	ldrb	r2, [r7, #3]
 8000d16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    }
 8000d1a:	bf00      	nop
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <_ZN20StaticCircularBufferIhE14push_overwriteERKh>:
        item_count++;
        return true;
    }

    // Add item with overwrite
    void push_overwrite(const T& item) {
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
        buffer[head] = item;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	7811      	ldrb	r1, [r2, #0]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	54d1      	strb	r1, [r2, r3]
        head = (head + 1) % sup;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d40:	3301      	adds	r3, #1
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8000d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d4c:	fb01 f202 	mul.w	r2, r1, r2
 8000d50:	1a9a      	subs	r2, r3, r2
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	641a      	str	r2, [r3, #64]	@ 0x40

        if (full()) {
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f867 	bl	8000e2a <_ZNK20StaticCircularBufferIhE4fullEv>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00d      	beq.n	8000d7e <_ZN20StaticCircularBufferIhE14push_overwriteERKh+0x58>
            tail = (tail + 1) % sup;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	3301      	adds	r3, #1
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8000d6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d72:	fb01 f202 	mul.w	r2, r1, r2
 8000d76:	1a9a      	subs	r2, r3, r2
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	645a      	str	r2, [r3, #68]	@ 0x44
        } else {
            item_count++;
        }
    }
 8000d7c:	e004      	b.n	8000d88 <_ZN20StaticCircularBufferIhE14push_overwriteERKh+0x62>
            item_count++;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_ZN20StaticCircularBufferIhE3popERh>:

    // Extraction item
    bool pop(T& item) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
        if (empty()) {
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f858 	bl	8000e50 <_ZNK20StaticCircularBufferIhE5emptyEv>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <_ZN20StaticCircularBufferIhE3popERh+0x1a>
            return false;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e018      	b.n	8000ddc <_ZN20StaticCircularBufferIhE3popERh+0x4c>
        }

        item = buffer[tail];
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	5cd2      	ldrb	r2, [r2, r3]
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	701a      	strb	r2, [r3, #0]
        tail = (tail + 1) % sup;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	3301      	adds	r3, #1
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8000dc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000dc6:	fb01 f202 	mul.w	r2, r1, r2
 8000dca:	1a9a      	subs	r2, r3, r2
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	645a      	str	r2, [r3, #68]	@ 0x44
        item_count--;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	649a      	str	r2, [r3, #72]	@ 0x48
        return true;
 8000dda:	2301      	movs	r3, #1
    }
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZNK20StaticCircularBufferIhE7peek_atEjPh>:
        item = buffer[tail];
        return true;
    }

    // View item by index (0 - next)
    bool peek_at(size_t index, T* item) const { //TODO: check it
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
        if (index >= item_count) {
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d301      	bcc.n	8000dfe <_ZNK20StaticCircularBufferIhE7peek_atEjPh+0x1a>
            return false;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e010      	b.n	8000e20 <_ZNK20StaticCircularBufferIhE7peek_atEjPh+0x3c>
        }

        *item = buffer[(tail + index) % sup];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	4413      	add	r3, r2
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8000e0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e10:	fb01 f202 	mul.w	r2, r1, r2
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	5cd2      	ldrb	r2, [r2, r3]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	701a      	strb	r2, [r3, #0]
        return true;
 8000e1e:	2301      	movs	r3, #1
    }
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <_ZNK20StaticCircularBufferIhE4fullEv>:

    	}
    }

    bool empty() const { return item_count == 0; }
    bool full() const { return item_count == sup; }
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	bf0c      	ite	eq
 8000e40:	2301      	moveq	r3, #1
 8000e42:	2300      	movne	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <_ZNK20StaticCircularBufferIhE5emptyEv>:
    bool empty() const { return item_count == 0; }
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	bf0c      	ite	eq
 8000e60:	2301      	moveq	r3, #1
 8000e62:	2300      	movne	r3, #0
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <_ZN7VEEPROMC1Ev>:
	PageStatus status;
	uint16_t wear;
};


class VEEPROM {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f87e 	bl	8000f80 <_ZN20StaticCircularBufferIhEC1Ev>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e94:	f000 f9fa 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e98:	f000 f80a 	bl	8000eb0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9c:	f000 f854 	bl	8000f48 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */
//  __enable_irq();



  veeprom.init(3);
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	4802      	ldr	r0, [pc, #8]	@ (8000eac <main+0x1c>)
 8000ea4:	f7ff f952 	bl	800014c <_ZN7VEEPROM4initEh>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <main+0x18>
 8000eac:	20000084 	.word	0x20000084

08000eb0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b090      	sub	sp, #64	@ 0x40
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	2228      	movs	r2, #40	@ 0x28
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fa1f 	bl	8002302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eda:	2310      	movs	r3, #16
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ee6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 fd11 	bl	8001918 <HAL_RCC_OscConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	bf14      	ite	ne
 8000efc:	2301      	movne	r3, #1
 8000efe:	2300      	moveq	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8000f06:	f000 f835 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2102      	movs	r1, #2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 ff79 	bl	8001e1c <HAL_RCC_ClockConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf14      	ite	ne
 8000f30:	2301      	movne	r3, #1
 8000f32:	2300      	moveq	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000f3a:	f000 f81b 	bl	8000f74 <Error_Handler>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3740      	adds	r7, #64	@ 0x40
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <_ZL12MX_GPIO_Initv+0x28>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <_ZL12MX_GPIO_Initv+0x28>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <_ZL12MX_GPIO_Initv+0x28>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <Error_Handler+0x8>

08000f80 <_ZN20StaticCircularBufferIhEC1Ev>:
    StaticCircularBuffer() : head(0), tail(0), item_count(0) {}
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	649a      	str	r2, [r3, #72]	@ 0x48
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fa8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d107      	bne.n	8000fc8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d102      	bne.n	8000fc8 <_Z41__static_initialization_and_destruction_0ii+0x20>
VEEPROM veeprom;
 8000fc2:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000fc4:	f7ff ff54 	bl	8000e70 <_ZN7VEEPROMC1Ev>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000084 	.word	0x20000084

08000fd4 <_GLOBAL__sub_I_veeprom>:
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff ffe3 	bl	8000fa8 <_Z41__static_initialization_and_destruction_0ii>
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <HAL_MspInit+0x5c>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <HAL_MspInit+0x5c>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6193      	str	r3, [r2, #24]
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <HAL_MspInit+0x5c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_MspInit+0x5c>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <HAL_MspInit+0x5c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <HAL_MspInit+0x5c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_MspInit+0x60>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <HAL_MspInit+0x60>)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <NMI_Handler+0x4>

08001050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
	volatile uint32_t* CFSR = (volatile uint32_t*)0xE000ED28;
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <HardFault_Handler+0x48>)
 8001058:	617b      	str	r3, [r7, #20]
	volatile uint32_t* BFAR = (volatile uint32_t*)0xE000ED38;
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <HardFault_Handler+0x4c>)
 800105c:	613b      	str	r3, [r7, #16]
	volatile uint32_t* HFSR = (volatile uint32_t*)0xE000ED2C;
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <HardFault_Handler+0x50>)
 8001060:	60fb      	str	r3, [r7, #12]

	uint32_t cfsr = *CFSR;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60bb      	str	r3, [r7, #8]
	uint32_t bfar = *BFAR;
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	607b      	str	r3, [r7, #4]
	uint32_t hfsr = *HFSR;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	603b      	str	r3, [r7, #0]
	if (cfsr & (1 << 3))  { /* UNSTKERR: Unstacking Error */ }
	if (cfsr & (1 << 4))  { /* STKERR: Stacking Error */ }
	if (cfsr & (1 << 7))  { /* BFARVALID: BFAR is valid */ }

	// Запись в отладочный вывод
	printf("BusFault! CFSR: 0x%08lX, BFAR: 0x%08lX, HFSR: 0x%08lX\n",
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <HardFault_Handler+0x54>)
 800107c:	f001 f8ec 	bl	8002258 <iprintf>
		   cfsr, bfar, hfsr);

	// Если BFAR валиден - это адрес вызвавший ошибку
	if (cfsr & (1 << 7)) {
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <HardFault_Handler+0x44>
		printf("Fault address: 0x%08lX\n", bfar);
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <HardFault_Handler+0x58>)
 800108e:	f001 f8e3 	bl	8002258 <iprintf>
	}

	while(1) {
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <HardFault_Handler+0x44>
 8001098:	e000ed28 	.word	0xe000ed28
 800109c:	e000ed38 	.word	0xe000ed38
 80010a0:	e000ed2c 	.word	0xe000ed2c
 80010a4:	08002f60 	.word	0x08002f60
 80010a8:	08002f98 	.word	0x08002f98

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <MemManage_Handler+0x4>

080010b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 f914 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	e00a      	b.n	800111c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001106:	f3af 8000 	nop.w
 800110a:	4601      	mov	r1, r0
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	60ba      	str	r2, [r7, #8]
 8001112:	b2ca      	uxtb	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbf0      	blt.n	8001106 <_read+0x12>
  }

  return len;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	e009      	b.n	8001154 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	60ba      	str	r2, [r7, #8]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbf1      	blt.n	8001140 <_write+0x12>
  }
  return len;
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_close>:

int _close(int file)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800118c:	605a      	str	r2, [r3, #4]
  return 0;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <_isatty>:

int _isatty(int file)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
	...

080011c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d0:	4a14      	ldr	r2, [pc, #80]	@ (8001224 <_sbrk+0x5c>)
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <_sbrk+0x60>)
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <_sbrk+0x64>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <_sbrk+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d207      	bcs.n	8001208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f8:	f001 f8d2 	bl	80023a0 <__errno>
 80011fc:	4603      	mov	r3, r0
 80011fe:	220c      	movs	r2, #12
 8001200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	e009      	b.n	800121c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	4a05      	ldr	r2, [pc, #20]	@ (800122c <_sbrk+0x64>)
 8001218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20005000 	.word	0x20005000
 8001228:	00000400 	.word	0x00000400
 800122c:	200002d8 	.word	0x200002d8
 8001230:	20000450 	.word	0x20000450

08001234 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001240:	f7ff fff8 	bl	8001234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480b      	ldr	r0, [pc, #44]	@ (8001274 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001246:	490c      	ldr	r1, [pc, #48]	@ (8001278 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001248:	4a0c      	ldr	r2, [pc, #48]	@ (800127c <LoopFillZerobss+0x16>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a09      	ldr	r2, [pc, #36]	@ (8001280 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800125c:	4c09      	ldr	r4, [pc, #36]	@ (8001284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126a:	f001 f89f 	bl	80023ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126e:	f7ff fe0f 	bl	8000e90 <main>
  bx lr
 8001272:	4770      	bx	lr
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800127c:	08003014 	.word	0x08003014
  ldr r2, =_sbss
 8001280:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001284:	2000044c 	.word	0x2000044c

08001288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC1_2_IRQHandler>
	...

0800128c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <HAL_Init+0x28>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a07      	ldr	r2, [pc, #28]	@ (80012b4 <HAL_Init+0x28>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 f907 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a2:	200f      	movs	r0, #15
 80012a4:	f000 f808 	bl	80012b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff fe9c 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_InitTick+0x54>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <HAL_InitTick+0x58>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f911 	bl	80014fe <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00e      	b.n	8001304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d80a      	bhi.n	8001302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f000 f8e7 	bl	80014c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4a06      	ldr	r2, [pc, #24]	@ (8001314 <HAL_InitTick+0x5c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000000 	.word	0x20000000
 8001310:	20000008 	.word	0x20000008
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_IncTick+0x1c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_IncTick+0x20>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a03      	ldr	r2, [pc, #12]	@ (8001338 <HAL_IncTick+0x20>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	20000008 	.word	0x20000008
 8001338:	200002dc 	.word	0x200002dc

0800133c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b02      	ldr	r3, [pc, #8]	@ (800134c <HAL_GetTick+0x10>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	200002dc 	.word	0x200002dc

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	@ (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	@ (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	@ 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800147c:	d301      	bcc.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <SysTick_Config+0x40>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	210f      	movs	r1, #15
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f7ff ff90 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <SysTick_Config+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <SysTick_Config+0x40>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff49 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff5e 	bl	8001398 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff90 	bl	8001408 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5f 	bl	80013b4 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffb0 	bl	800146c <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001532:	4b2f      	ldr	r3, [pc, #188]	@ (80015f0 <HAL_FLASH_Program+0xd8>)
 8001534:	7e1b      	ldrb	r3, [r3, #24]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_FLASH_Program+0x26>
 800153a:	2302      	movs	r3, #2
 800153c:	e054      	b.n	80015e8 <HAL_FLASH_Program+0xd0>
 800153e:	4b2c      	ldr	r3, [pc, #176]	@ (80015f0 <HAL_FLASH_Program+0xd8>)
 8001540:	2201      	movs	r2, #1
 8001542:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001544:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001548:	f000 f8a8 	bl	800169c <FLASH_WaitForLastOperation>
 800154c:	4603      	mov	r3, r0
 800154e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001550:	7dfb      	ldrb	r3, [r7, #23]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d144      	bne.n	80015e0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d102      	bne.n	8001562 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800155c:	2301      	movs	r3, #1
 800155e:	757b      	strb	r3, [r7, #21]
 8001560:	e007      	b.n	8001572 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d102      	bne.n	800156e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001568:	2302      	movs	r3, #2
 800156a:	757b      	strb	r3, [r7, #21]
 800156c:	e001      	b.n	8001572 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800156e:	2304      	movs	r3, #4
 8001570:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001572:	2300      	movs	r3, #0
 8001574:	75bb      	strb	r3, [r7, #22]
 8001576:	e02d      	b.n	80015d4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001578:	7dbb      	ldrb	r3, [r7, #22]
 800157a:	005a      	lsls	r2, r3, #1
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	eb02 0c03 	add.w	ip, r2, r3
 8001582:	7dbb      	ldrb	r3, [r7, #22]
 8001584:	0119      	lsls	r1, r3, #4
 8001586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800158a:	f1c1 0620 	rsb	r6, r1, #32
 800158e:	f1a1 0020 	sub.w	r0, r1, #32
 8001592:	fa22 f401 	lsr.w	r4, r2, r1
 8001596:	fa03 f606 	lsl.w	r6, r3, r6
 800159a:	4334      	orrs	r4, r6
 800159c:	fa23 f000 	lsr.w	r0, r3, r0
 80015a0:	4304      	orrs	r4, r0
 80015a2:	fa23 f501 	lsr.w	r5, r3, r1
 80015a6:	b2a3      	uxth	r3, r4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4660      	mov	r0, ip
 80015ac:	f000 f85a 	bl	8001664 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80015b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015b4:	f000 f872 	bl	800169c <FLASH_WaitForLastOperation>
 80015b8:	4603      	mov	r3, r0
 80015ba:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80015bc:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <HAL_FLASH_Program+0xdc>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	4a0c      	ldr	r2, [pc, #48]	@ (80015f4 <HAL_FLASH_Program+0xdc>)
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d107      	bne.n	80015de <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80015ce:	7dbb      	ldrb	r3, [r7, #22]
 80015d0:	3301      	adds	r3, #1
 80015d2:	75bb      	strb	r3, [r7, #22]
 80015d4:	7dba      	ldrb	r2, [r7, #22]
 80015d6:	7d7b      	ldrb	r3, [r7, #21]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d3cd      	bcc.n	8001578 <HAL_FLASH_Program+0x60>
 80015dc:	e000      	b.n	80015e0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80015de:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_FLASH_Program+0xd8>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	761a      	strb	r2, [r3, #24]

  return status;
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f0:	200002e0 	.word	0x200002e0
 80015f4:	40022000 	.word	0x40022000

080015f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001602:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <HAL_FLASH_Unlock+0x40>)
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00d      	beq.n	800162a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800160e:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <HAL_FLASH_Unlock+0x40>)
 8001610:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <HAL_FLASH_Unlock+0x44>)
 8001612:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <HAL_FLASH_Unlock+0x40>)
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <HAL_FLASH_Unlock+0x48>)
 8001618:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800161a:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <HAL_FLASH_Unlock+0x40>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800162a:	79fb      	ldrb	r3, [r7, #7]
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000
 800163c:	45670123 	.word	0x45670123
 8001640:	cdef89ab 	.word	0xcdef89ab

08001644 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_FLASH_Lock+0x1c>)
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_FLASH_Lock+0x1c>)
 800164e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001652:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000

08001664 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <FLASH_Program_HalfWord+0x30>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <FLASH_Program_HalfWord+0x34>)
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	4a07      	ldr	r2, [pc, #28]	@ (8001698 <FLASH_Program_HalfWord+0x34>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	887a      	ldrh	r2, [r7, #2]
 8001686:	801a      	strh	r2, [r3, #0]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200002e0 	.word	0x200002e0
 8001698:	40022000 	.word	0x40022000

0800169c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff fe4a 	bl	800133c <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80016aa:	e010      	b.n	80016ce <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b2:	d00c      	beq.n	80016ce <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <FLASH_WaitForLastOperation+0x2e>
 80016ba:	f7ff fe3f 	bl	800133c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d201      	bcs.n	80016ce <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e025      	b.n	800171a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <FLASH_WaitForLastOperation+0x88>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1e8      	bne.n	80016ac <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80016da:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <FLASH_WaitForLastOperation+0x88>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <FLASH_WaitForLastOperation+0x88>)
 80016e8:	2220      	movs	r2, #32
 80016ea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80016ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <FLASH_WaitForLastOperation+0x88>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10b      	bne.n	8001710 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <FLASH_WaitForLastOperation+0x88>)
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <FLASH_WaitForLastOperation+0x88>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001710:	f000 f80a 	bl	8001728 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000

08001728 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001732:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <FLASH_SetErrorCode+0x98>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	d009      	beq.n	8001752 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	4a1f      	ldr	r2, [pc, #124]	@ (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001748:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001752:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <FLASH_SetErrorCode+0x98>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800175e:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001768:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <FLASH_SetErrorCode+0x98>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	4a0f      	ldr	r2, [pc, #60]	@ (80017c4 <FLASH_SetErrorCode+0x9c>)
 8001788:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800178a:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <FLASH_SetErrorCode+0x98>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a0c      	ldr	r2, [pc, #48]	@ (80017c0 <FLASH_SetErrorCode+0x98>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f240 1201 	movw	r2, #257	@ 0x101
 800179c:	4293      	cmp	r3, r2
 800179e:	d106      	bne.n	80017ae <FLASH_SetErrorCode+0x86>
 80017a0:	4b07      	ldr	r3, [pc, #28]	@ (80017c0 <FLASH_SetErrorCode+0x98>)
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	4a06      	ldr	r2, [pc, #24]	@ (80017c0 <FLASH_SetErrorCode+0x98>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	61d3      	str	r3, [r2, #28]
}  
 80017ac:	e002      	b.n	80017b4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80017ae:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <FLASH_SetErrorCode+0x98>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	60d3      	str	r3, [r2, #12]
}  
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000
 80017c4:	200002e0 	.word	0x200002e0

080017c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017da:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <HAL_FLASHEx_Erase+0xd0>)
 80017dc:	7e1b      	ldrb	r3, [r3, #24]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_FLASHEx_Erase+0x1e>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e053      	b.n	800188e <HAL_FLASHEx_Erase+0xc6>
 80017e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001898 <HAL_FLASHEx_Erase+0xd0>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d116      	bne.n	8001822 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80017f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017f8:	f7ff ff50 	bl	800169c <FLASH_WaitForLastOperation>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d141      	bne.n	8001886 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001802:	2001      	movs	r0, #1
 8001804:	f000 f84c 	bl	80018a0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001808:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800180c:	f7ff ff46 	bl	800169c <FLASH_WaitForLastOperation>
 8001810:	4603      	mov	r3, r0
 8001812:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001814:	4b21      	ldr	r3, [pc, #132]	@ (800189c <HAL_FLASHEx_Erase+0xd4>)
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	4a20      	ldr	r2, [pc, #128]	@ (800189c <HAL_FLASHEx_Erase+0xd4>)
 800181a:	f023 0304 	bic.w	r3, r3, #4
 800181e:	6113      	str	r3, [r2, #16]
 8001820:	e031      	b.n	8001886 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001822:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001826:	f7ff ff39 	bl	800169c <FLASH_WaitForLastOperation>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d12a      	bne.n	8001886 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f04f 32ff 	mov.w	r2, #4294967295
 8001836:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	e019      	b.n	8001874 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001840:	68b8      	ldr	r0, [r7, #8]
 8001842:	f000 f849 	bl	80018d8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001846:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800184a:	f7ff ff27 	bl	800169c <FLASH_WaitForLastOperation>
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_FLASHEx_Erase+0xd4>)
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	4a11      	ldr	r2, [pc, #68]	@ (800189c <HAL_FLASHEx_Erase+0xd4>)
 8001858:	f023 0302 	bic.w	r3, r3, #2
 800185c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	601a      	str	r2, [r3, #0]
            break;
 800186a:	e00c      	b.n	8001886 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001872:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	029a      	lsls	r2, r3, #10
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4413      	add	r3, r2
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	429a      	cmp	r2, r3
 8001884:	d3dc      	bcc.n	8001840 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001886:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <HAL_FLASHEx_Erase+0xd0>)
 8001888:	2200      	movs	r2, #0
 800188a:	761a      	strb	r2, [r3, #24]

  return status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200002e0 	.word	0x200002e0
 800189c:	40022000 	.word	0x40022000

080018a0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018a8:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <FLASH_MassErase+0x30>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <FLASH_MassErase+0x34>)
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <FLASH_MassErase+0x34>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <FLASH_MassErase+0x34>)
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <FLASH_MassErase+0x34>)
 80018c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018c4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	200002e0 	.word	0x200002e0
 80018d4:	40022000 	.word	0x40022000

080018d8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <FLASH_PageErase+0x38>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <FLASH_PageErase+0x3c>)
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <FLASH_PageErase+0x3c>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80018f2:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <FLASH_PageErase+0x3c>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <FLASH_PageErase+0x3c>)
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <FLASH_PageErase+0x3c>)
 80018fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001902:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200002e0 	.word	0x200002e0
 8001914:	40022000 	.word	0x40022000

08001918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e272      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8087 	beq.w	8001a46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001938:	4b92      	ldr	r3, [pc, #584]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b04      	cmp	r3, #4
 8001942:	d00c      	beq.n	800195e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001944:	4b8f      	ldr	r3, [pc, #572]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d112      	bne.n	8001976 <HAL_RCC_OscConfig+0x5e>
 8001950:	4b8c      	ldr	r3, [pc, #560]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800195c:	d10b      	bne.n	8001976 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195e:	4b89      	ldr	r3, [pc, #548]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d06c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x12c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d168      	bne.n	8001a44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e24c      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x76>
 8001980:	4b80      	ldr	r3, [pc, #512]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a7f      	ldr	r2, [pc, #508]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e02e      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x98>
 8001996:	4b7b      	ldr	r3, [pc, #492]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a7a      	ldr	r2, [pc, #488]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b78      	ldr	r3, [pc, #480]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a77      	ldr	r2, [pc, #476]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e01d      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0xbc>
 80019ba:	4b72      	ldr	r3, [pc, #456]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a71      	ldr	r2, [pc, #452]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e00b      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 80019d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b68      	ldr	r3, [pc, #416]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a67      	ldr	r2, [pc, #412]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fca2 	bl	800133c <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fc9e 	bl	800133c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	@ 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e200      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0xe4>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fc8e 	bl	800133c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fc8a 	bl	800133c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	@ 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1ec      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	4b53      	ldr	r3, [pc, #332]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x10c>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d063      	beq.n	8001b1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a52:	4b4c      	ldr	r3, [pc, #304]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a5e:	4b49      	ldr	r3, [pc, #292]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d11c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x18c>
 8001a6a:	4b46      	ldr	r3, [pc, #280]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d116      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	4b43      	ldr	r3, [pc, #268]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_RCC_OscConfig+0x176>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e1c0      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4939      	ldr	r1, [pc, #228]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	e03a      	b.n	8001b1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aac:	4b36      	ldr	r3, [pc, #216]	@ (8001b88 <HAL_RCC_OscConfig+0x270>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fc43 	bl	800133c <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aba:	f7ff fc3f 	bl	800133c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e1a1      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	4b2d      	ldr	r3, [pc, #180]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4927      	ldr	r1, [pc, #156]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aee:	4b26      	ldr	r3, [pc, #152]	@ (8001b88 <HAL_RCC_OscConfig+0x270>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fc22 	bl	800133c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff fc1e 	bl	800133c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e180      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d03a      	beq.n	8001b9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d019      	beq.n	8001b62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2e:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b34:	f7ff fc02 	bl	800133c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fbfe 	bl	800133c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e160      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f000 fa9c 	bl	8002098 <RCC_Delay>
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b62:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7ff fbe8 	bl	800133c <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6e:	e00f      	b.n	8001b90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff fbe4 	bl	800133c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d908      	bls.n	8001b90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e146      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	42420000 	.word	0x42420000
 8001b8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	4b92      	ldr	r3, [pc, #584]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1e9      	bne.n	8001b70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a6 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b8b      	ldr	r3, [pc, #556]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10d      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4b88      	ldr	r3, [pc, #544]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a87      	ldr	r2, [pc, #540]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b85      	ldr	r3, [pc, #532]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd6:	4b82      	ldr	r3, [pc, #520]	@ (8001de0 <HAL_RCC_OscConfig+0x4c8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d118      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be2:	4b7f      	ldr	r3, [pc, #508]	@ (8001de0 <HAL_RCC_OscConfig+0x4c8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7e      	ldr	r2, [pc, #504]	@ (8001de0 <HAL_RCC_OscConfig+0x4c8>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fba5 	bl	800133c <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf6:	f7ff fba1 	bl	800133c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b64      	cmp	r3, #100	@ 0x64
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e103      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	4b75      	ldr	r3, [pc, #468]	@ (8001de0 <HAL_RCC_OscConfig+0x4c8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x312>
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4a6e      	ldr	r2, [pc, #440]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6213      	str	r3, [r2, #32]
 8001c28:	e02d      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x334>
 8001c32:	4b6a      	ldr	r3, [pc, #424]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a69      	ldr	r2, [pc, #420]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	4b67      	ldr	r3, [pc, #412]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a66      	ldr	r2, [pc, #408]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	6213      	str	r3, [r2, #32]
 8001c4a:	e01c      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0x356>
 8001c54:	4b61      	ldr	r3, [pc, #388]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a60      	ldr	r2, [pc, #384]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	4b5e      	ldr	r3, [pc, #376]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a5d      	ldr	r2, [pc, #372]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6213      	str	r3, [r2, #32]
 8001c6c:	e00b      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a5a      	ldr	r2, [pc, #360]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6213      	str	r3, [r2, #32]
 8001c7a:	4b58      	ldr	r3, [pc, #352]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4a57      	ldr	r2, [pc, #348]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d015      	beq.n	8001cba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fb55 	bl	800133c <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff fb51 	bl	800133c <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0b1      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	4b4b      	ldr	r3, [pc, #300]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ee      	beq.n	8001c96 <HAL_RCC_OscConfig+0x37e>
 8001cb8:	e014      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7ff fb3f 	bl	800133c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7ff fb3b 	bl	800133c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e09b      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	4b40      	ldr	r3, [pc, #256]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ee      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4b3c      	ldr	r3, [pc, #240]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4a3b      	ldr	r2, [pc, #236]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8087 	beq.w	8001e0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d00:	4b36      	ldr	r3, [pc, #216]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d061      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d146      	bne.n	8001da2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b33      	ldr	r3, [pc, #204]	@ (8001de4 <HAL_RCC_OscConfig+0x4cc>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff fb0f 	bl	800133c <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d22:	f7ff fb0b 	bl	800133c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e06d      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d34:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d48:	d108      	bne.n	8001d5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d4a:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4921      	ldr	r1, [pc, #132]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a19      	ldr	r1, [r3, #32]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	491b      	ldr	r1, [pc, #108]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fadf 	bl	800133c <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7ff fadb 	bl	800133c <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e03d      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x46a>
 8001da0:	e035      	b.n	8001e0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_RCC_OscConfig+0x4cc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fac8 	bl	800133c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff fac4 	bl	800133c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e026      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x498>
 8001dce:	e01e      	b.n	8001e0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e019      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40007000 	.word	0x40007000
 8001de4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001de8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <HAL_RCC_OscConfig+0x500>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000

08001e1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0d0      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e30:	4b6a      	ldr	r3, [pc, #424]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d910      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b67      	ldr	r3, [pc, #412]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 0207 	bic.w	r2, r3, #7
 8001e46:	4965      	ldr	r1, [pc, #404]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b63      	ldr	r3, [pc, #396]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0b8      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e78:	4b59      	ldr	r3, [pc, #356]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a58      	ldr	r2, [pc, #352]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e90:	4b53      	ldr	r3, [pc, #332]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4a52      	ldr	r2, [pc, #328]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b50      	ldr	r3, [pc, #320]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	494d      	ldr	r1, [pc, #308]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d040      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b47      	ldr	r3, [pc, #284]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d115      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e07f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	4b41      	ldr	r3, [pc, #260]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e073      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e06b      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efa:	4b39      	ldr	r3, [pc, #228]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f023 0203 	bic.w	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4936      	ldr	r1, [pc, #216]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7ff fa16 	bl	800133c <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f14:	f7ff fa12 	bl	800133c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e053      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 020c 	and.w	r2, r3, #12
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d1eb      	bne.n	8001f14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b27      	ldr	r3, [pc, #156]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d210      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4922      	ldr	r1, [pc, #136]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b20      	ldr	r3, [pc, #128]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e032      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4916      	ldr	r1, [pc, #88]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f96:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	490e      	ldr	r1, [pc, #56]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001faa:	f000 f821 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	490a      	ldr	r1, [pc, #40]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	5ccb      	ldrb	r3, [r1, r3]
 8001fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc2:	4a09      	ldr	r2, [pc, #36]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <HAL_RCC_ClockConfig+0x1d0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f974 	bl	80012b8 <HAL_InitTick>

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08002fb0 	.word	0x08002fb0
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800200a:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x94>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d002      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x30>
 800201a:	2b08      	cmp	r3, #8
 800201c:	d003      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0x36>
 800201e:	e027      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002020:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x98>)
 8002022:	613b      	str	r3, [r7, #16]
      break;
 8002024:	e027      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0c9b      	lsrs	r3, r3, #18
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	4a17      	ldr	r2, [pc, #92]	@ (800208c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002030:	5cd3      	ldrb	r3, [r2, r3]
 8002032:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800203e:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x94>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	0c5b      	lsrs	r3, r3, #17
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	4a11      	ldr	r2, [pc, #68]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xa0>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a0d      	ldr	r2, [pc, #52]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x98>)
 8002052:	fb03 f202 	mul.w	r2, r3, r2
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	e004      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	613b      	str	r3, [r7, #16]
      break;
 800206e:	e002      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x98>)
 8002072:	613b      	str	r3, [r7, #16]
      break;
 8002074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002076:	693b      	ldr	r3, [r7, #16]
}
 8002078:	4618      	mov	r0, r3
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	007a1200 	.word	0x007a1200
 800208c:	08002fc0 	.word	0x08002fc0
 8002090:	08002fd0 	.word	0x08002fd0
 8002094:	003d0900 	.word	0x003d0900

08002098 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <RCC_Delay+0x34>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <RCC_Delay+0x38>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	0a5b      	lsrs	r3, r3, #9
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020b4:	bf00      	nop
  }
  while (Delay --);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	60fa      	str	r2, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f9      	bne.n	80020b4 <RCC_Delay+0x1c>
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	20000000 	.word	0x20000000
 80020d0:	10624dd3 	.word	0x10624dd3

080020d4 <std>:
 80020d4:	2300      	movs	r3, #0
 80020d6:	b510      	push	{r4, lr}
 80020d8:	4604      	mov	r4, r0
 80020da:	e9c0 3300 	strd	r3, r3, [r0]
 80020de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020e2:	6083      	str	r3, [r0, #8]
 80020e4:	8181      	strh	r1, [r0, #12]
 80020e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80020e8:	81c2      	strh	r2, [r0, #14]
 80020ea:	6183      	str	r3, [r0, #24]
 80020ec:	4619      	mov	r1, r3
 80020ee:	2208      	movs	r2, #8
 80020f0:	305c      	adds	r0, #92	@ 0x5c
 80020f2:	f000 f906 	bl	8002302 <memset>
 80020f6:	4b0d      	ldr	r3, [pc, #52]	@ (800212c <std+0x58>)
 80020f8:	6224      	str	r4, [r4, #32]
 80020fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <std+0x5c>)
 80020fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002100:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <std+0x60>)
 8002102:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002104:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <std+0x64>)
 8002106:	6323      	str	r3, [r4, #48]	@ 0x30
 8002108:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <std+0x68>)
 800210a:	429c      	cmp	r4, r3
 800210c:	d006      	beq.n	800211c <std+0x48>
 800210e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002112:	4294      	cmp	r4, r2
 8002114:	d002      	beq.n	800211c <std+0x48>
 8002116:	33d0      	adds	r3, #208	@ 0xd0
 8002118:	429c      	cmp	r4, r3
 800211a:	d105      	bne.n	8002128 <std+0x54>
 800211c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002124:	f000 b966 	b.w	80023f4 <__retarget_lock_init_recursive>
 8002128:	bd10      	pop	{r4, pc}
 800212a:	bf00      	nop
 800212c:	0800227d 	.word	0x0800227d
 8002130:	0800229f 	.word	0x0800229f
 8002134:	080022d7 	.word	0x080022d7
 8002138:	080022fb 	.word	0x080022fb
 800213c:	20000300 	.word	0x20000300

08002140 <stdio_exit_handler>:
 8002140:	4a02      	ldr	r2, [pc, #8]	@ (800214c <stdio_exit_handler+0xc>)
 8002142:	4903      	ldr	r1, [pc, #12]	@ (8002150 <stdio_exit_handler+0x10>)
 8002144:	4803      	ldr	r0, [pc, #12]	@ (8002154 <stdio_exit_handler+0x14>)
 8002146:	f000 b869 	b.w	800221c <_fwalk_sglue>
 800214a:	bf00      	nop
 800214c:	2000000c 	.word	0x2000000c
 8002150:	08002c8d 	.word	0x08002c8d
 8002154:	2000001c 	.word	0x2000001c

08002158 <cleanup_stdio>:
 8002158:	6841      	ldr	r1, [r0, #4]
 800215a:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <cleanup_stdio+0x34>)
 800215c:	b510      	push	{r4, lr}
 800215e:	4299      	cmp	r1, r3
 8002160:	4604      	mov	r4, r0
 8002162:	d001      	beq.n	8002168 <cleanup_stdio+0x10>
 8002164:	f000 fd92 	bl	8002c8c <_fflush_r>
 8002168:	68a1      	ldr	r1, [r4, #8]
 800216a:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <cleanup_stdio+0x38>)
 800216c:	4299      	cmp	r1, r3
 800216e:	d002      	beq.n	8002176 <cleanup_stdio+0x1e>
 8002170:	4620      	mov	r0, r4
 8002172:	f000 fd8b 	bl	8002c8c <_fflush_r>
 8002176:	68e1      	ldr	r1, [r4, #12]
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <cleanup_stdio+0x3c>)
 800217a:	4299      	cmp	r1, r3
 800217c:	d004      	beq.n	8002188 <cleanup_stdio+0x30>
 800217e:	4620      	mov	r0, r4
 8002180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002184:	f000 bd82 	b.w	8002c8c <_fflush_r>
 8002188:	bd10      	pop	{r4, pc}
 800218a:	bf00      	nop
 800218c:	20000300 	.word	0x20000300
 8002190:	20000368 	.word	0x20000368
 8002194:	200003d0 	.word	0x200003d0

08002198 <global_stdio_init.part.0>:
 8002198:	b510      	push	{r4, lr}
 800219a:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <global_stdio_init.part.0+0x30>)
 800219c:	4c0b      	ldr	r4, [pc, #44]	@ (80021cc <global_stdio_init.part.0+0x34>)
 800219e:	4a0c      	ldr	r2, [pc, #48]	@ (80021d0 <global_stdio_init.part.0+0x38>)
 80021a0:	4620      	mov	r0, r4
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	2104      	movs	r1, #4
 80021a6:	2200      	movs	r2, #0
 80021a8:	f7ff ff94 	bl	80020d4 <std>
 80021ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80021b0:	2201      	movs	r2, #1
 80021b2:	2109      	movs	r1, #9
 80021b4:	f7ff ff8e 	bl	80020d4 <std>
 80021b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80021bc:	2202      	movs	r2, #2
 80021be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021c2:	2112      	movs	r1, #18
 80021c4:	f7ff bf86 	b.w	80020d4 <std>
 80021c8:	20000438 	.word	0x20000438
 80021cc:	20000300 	.word	0x20000300
 80021d0:	08002141 	.word	0x08002141

080021d4 <__sfp_lock_acquire>:
 80021d4:	4801      	ldr	r0, [pc, #4]	@ (80021dc <__sfp_lock_acquire+0x8>)
 80021d6:	f000 b90e 	b.w	80023f6 <__retarget_lock_acquire_recursive>
 80021da:	bf00      	nop
 80021dc:	20000441 	.word	0x20000441

080021e0 <__sfp_lock_release>:
 80021e0:	4801      	ldr	r0, [pc, #4]	@ (80021e8 <__sfp_lock_release+0x8>)
 80021e2:	f000 b909 	b.w	80023f8 <__retarget_lock_release_recursive>
 80021e6:	bf00      	nop
 80021e8:	20000441 	.word	0x20000441

080021ec <__sinit>:
 80021ec:	b510      	push	{r4, lr}
 80021ee:	4604      	mov	r4, r0
 80021f0:	f7ff fff0 	bl	80021d4 <__sfp_lock_acquire>
 80021f4:	6a23      	ldr	r3, [r4, #32]
 80021f6:	b11b      	cbz	r3, 8002200 <__sinit+0x14>
 80021f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021fc:	f7ff bff0 	b.w	80021e0 <__sfp_lock_release>
 8002200:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <__sinit+0x28>)
 8002202:	6223      	str	r3, [r4, #32]
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <__sinit+0x2c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f5      	bne.n	80021f8 <__sinit+0xc>
 800220c:	f7ff ffc4 	bl	8002198 <global_stdio_init.part.0>
 8002210:	e7f2      	b.n	80021f8 <__sinit+0xc>
 8002212:	bf00      	nop
 8002214:	08002159 	.word	0x08002159
 8002218:	20000438 	.word	0x20000438

0800221c <_fwalk_sglue>:
 800221c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002220:	4607      	mov	r7, r0
 8002222:	4688      	mov	r8, r1
 8002224:	4614      	mov	r4, r2
 8002226:	2600      	movs	r6, #0
 8002228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800222c:	f1b9 0901 	subs.w	r9, r9, #1
 8002230:	d505      	bpl.n	800223e <_fwalk_sglue+0x22>
 8002232:	6824      	ldr	r4, [r4, #0]
 8002234:	2c00      	cmp	r4, #0
 8002236:	d1f7      	bne.n	8002228 <_fwalk_sglue+0xc>
 8002238:	4630      	mov	r0, r6
 800223a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800223e:	89ab      	ldrh	r3, [r5, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d907      	bls.n	8002254 <_fwalk_sglue+0x38>
 8002244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002248:	3301      	adds	r3, #1
 800224a:	d003      	beq.n	8002254 <_fwalk_sglue+0x38>
 800224c:	4629      	mov	r1, r5
 800224e:	4638      	mov	r0, r7
 8002250:	47c0      	blx	r8
 8002252:	4306      	orrs	r6, r0
 8002254:	3568      	adds	r5, #104	@ 0x68
 8002256:	e7e9      	b.n	800222c <_fwalk_sglue+0x10>

08002258 <iprintf>:
 8002258:	b40f      	push	{r0, r1, r2, r3}
 800225a:	b507      	push	{r0, r1, r2, lr}
 800225c:	4906      	ldr	r1, [pc, #24]	@ (8002278 <iprintf+0x20>)
 800225e:	ab04      	add	r3, sp, #16
 8002260:	6808      	ldr	r0, [r1, #0]
 8002262:	f853 2b04 	ldr.w	r2, [r3], #4
 8002266:	6881      	ldr	r1, [r0, #8]
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	f000 f9e5 	bl	8002638 <_vfiprintf_r>
 800226e:	b003      	add	sp, #12
 8002270:	f85d eb04 	ldr.w	lr, [sp], #4
 8002274:	b004      	add	sp, #16
 8002276:	4770      	bx	lr
 8002278:	20000018 	.word	0x20000018

0800227c <__sread>:
 800227c:	b510      	push	{r4, lr}
 800227e:	460c      	mov	r4, r1
 8002280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002284:	f000 f868 	bl	8002358 <_read_r>
 8002288:	2800      	cmp	r0, #0
 800228a:	bfab      	itete	ge
 800228c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800228e:	89a3      	ldrhlt	r3, [r4, #12]
 8002290:	181b      	addge	r3, r3, r0
 8002292:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002296:	bfac      	ite	ge
 8002298:	6563      	strge	r3, [r4, #84]	@ 0x54
 800229a:	81a3      	strhlt	r3, [r4, #12]
 800229c:	bd10      	pop	{r4, pc}

0800229e <__swrite>:
 800229e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a2:	461f      	mov	r7, r3
 80022a4:	898b      	ldrh	r3, [r1, #12]
 80022a6:	4605      	mov	r5, r0
 80022a8:	05db      	lsls	r3, r3, #23
 80022aa:	460c      	mov	r4, r1
 80022ac:	4616      	mov	r6, r2
 80022ae:	d505      	bpl.n	80022bc <__swrite+0x1e>
 80022b0:	2302      	movs	r3, #2
 80022b2:	2200      	movs	r2, #0
 80022b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022b8:	f000 f83c 	bl	8002334 <_lseek_r>
 80022bc:	89a3      	ldrh	r3, [r4, #12]
 80022be:	4632      	mov	r2, r6
 80022c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022c4:	81a3      	strh	r3, [r4, #12]
 80022c6:	4628      	mov	r0, r5
 80022c8:	463b      	mov	r3, r7
 80022ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022d2:	f000 b853 	b.w	800237c <_write_r>

080022d6 <__sseek>:
 80022d6:	b510      	push	{r4, lr}
 80022d8:	460c      	mov	r4, r1
 80022da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022de:	f000 f829 	bl	8002334 <_lseek_r>
 80022e2:	1c43      	adds	r3, r0, #1
 80022e4:	89a3      	ldrh	r3, [r4, #12]
 80022e6:	bf15      	itete	ne
 80022e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80022ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80022ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80022f2:	81a3      	strheq	r3, [r4, #12]
 80022f4:	bf18      	it	ne
 80022f6:	81a3      	strhne	r3, [r4, #12]
 80022f8:	bd10      	pop	{r4, pc}

080022fa <__sclose>:
 80022fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fe:	f000 b809 	b.w	8002314 <_close_r>

08002302 <memset>:
 8002302:	4603      	mov	r3, r0
 8002304:	4402      	add	r2, r0
 8002306:	4293      	cmp	r3, r2
 8002308:	d100      	bne.n	800230c <memset+0xa>
 800230a:	4770      	bx	lr
 800230c:	f803 1b01 	strb.w	r1, [r3], #1
 8002310:	e7f9      	b.n	8002306 <memset+0x4>
	...

08002314 <_close_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	2300      	movs	r3, #0
 8002318:	4d05      	ldr	r5, [pc, #20]	@ (8002330 <_close_r+0x1c>)
 800231a:	4604      	mov	r4, r0
 800231c:	4608      	mov	r0, r1
 800231e:	602b      	str	r3, [r5, #0]
 8002320:	f7fe ff21 	bl	8001166 <_close>
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	d102      	bne.n	800232e <_close_r+0x1a>
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	b103      	cbz	r3, 800232e <_close_r+0x1a>
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	bd38      	pop	{r3, r4, r5, pc}
 8002330:	2000043c 	.word	0x2000043c

08002334 <_lseek_r>:
 8002334:	b538      	push	{r3, r4, r5, lr}
 8002336:	4604      	mov	r4, r0
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	2200      	movs	r2, #0
 800233e:	4d05      	ldr	r5, [pc, #20]	@ (8002354 <_lseek_r+0x20>)
 8002340:	602a      	str	r2, [r5, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	f7fe ff33 	bl	80011ae <_lseek>
 8002348:	1c43      	adds	r3, r0, #1
 800234a:	d102      	bne.n	8002352 <_lseek_r+0x1e>
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	b103      	cbz	r3, 8002352 <_lseek_r+0x1e>
 8002350:	6023      	str	r3, [r4, #0]
 8002352:	bd38      	pop	{r3, r4, r5, pc}
 8002354:	2000043c 	.word	0x2000043c

08002358 <_read_r>:
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	4608      	mov	r0, r1
 800235e:	4611      	mov	r1, r2
 8002360:	2200      	movs	r2, #0
 8002362:	4d05      	ldr	r5, [pc, #20]	@ (8002378 <_read_r+0x20>)
 8002364:	602a      	str	r2, [r5, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	f7fe fec4 	bl	80010f4 <_read>
 800236c:	1c43      	adds	r3, r0, #1
 800236e:	d102      	bne.n	8002376 <_read_r+0x1e>
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	b103      	cbz	r3, 8002376 <_read_r+0x1e>
 8002374:	6023      	str	r3, [r4, #0]
 8002376:	bd38      	pop	{r3, r4, r5, pc}
 8002378:	2000043c 	.word	0x2000043c

0800237c <_write_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4604      	mov	r4, r0
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	2200      	movs	r2, #0
 8002386:	4d05      	ldr	r5, [pc, #20]	@ (800239c <_write_r+0x20>)
 8002388:	602a      	str	r2, [r5, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	f7fe fecf 	bl	800112e <_write>
 8002390:	1c43      	adds	r3, r0, #1
 8002392:	d102      	bne.n	800239a <_write_r+0x1e>
 8002394:	682b      	ldr	r3, [r5, #0]
 8002396:	b103      	cbz	r3, 800239a <_write_r+0x1e>
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	bd38      	pop	{r3, r4, r5, pc}
 800239c:	2000043c 	.word	0x2000043c

080023a0 <__errno>:
 80023a0:	4b01      	ldr	r3, [pc, #4]	@ (80023a8 <__errno+0x8>)
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000018 	.word	0x20000018

080023ac <__libc_init_array>:
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	2600      	movs	r6, #0
 80023b0:	4d0c      	ldr	r5, [pc, #48]	@ (80023e4 <__libc_init_array+0x38>)
 80023b2:	4c0d      	ldr	r4, [pc, #52]	@ (80023e8 <__libc_init_array+0x3c>)
 80023b4:	1b64      	subs	r4, r4, r5
 80023b6:	10a4      	asrs	r4, r4, #2
 80023b8:	42a6      	cmp	r6, r4
 80023ba:	d109      	bne.n	80023d0 <__libc_init_array+0x24>
 80023bc:	f000 fdc4 	bl	8002f48 <_init>
 80023c0:	2600      	movs	r6, #0
 80023c2:	4d0a      	ldr	r5, [pc, #40]	@ (80023ec <__libc_init_array+0x40>)
 80023c4:	4c0a      	ldr	r4, [pc, #40]	@ (80023f0 <__libc_init_array+0x44>)
 80023c6:	1b64      	subs	r4, r4, r5
 80023c8:	10a4      	asrs	r4, r4, #2
 80023ca:	42a6      	cmp	r6, r4
 80023cc:	d105      	bne.n	80023da <__libc_init_array+0x2e>
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
 80023d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d4:	4798      	blx	r3
 80023d6:	3601      	adds	r6, #1
 80023d8:	e7ee      	b.n	80023b8 <__libc_init_array+0xc>
 80023da:	f855 3b04 	ldr.w	r3, [r5], #4
 80023de:	4798      	blx	r3
 80023e0:	3601      	adds	r6, #1
 80023e2:	e7f2      	b.n	80023ca <__libc_init_array+0x1e>
 80023e4:	08003008 	.word	0x08003008
 80023e8:	08003008 	.word	0x08003008
 80023ec:	08003008 	.word	0x08003008
 80023f0:	08003010 	.word	0x08003010

080023f4 <__retarget_lock_init_recursive>:
 80023f4:	4770      	bx	lr

080023f6 <__retarget_lock_acquire_recursive>:
 80023f6:	4770      	bx	lr

080023f8 <__retarget_lock_release_recursive>:
 80023f8:	4770      	bx	lr
	...

080023fc <_free_r>:
 80023fc:	b538      	push	{r3, r4, r5, lr}
 80023fe:	4605      	mov	r5, r0
 8002400:	2900      	cmp	r1, #0
 8002402:	d040      	beq.n	8002486 <_free_r+0x8a>
 8002404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002408:	1f0c      	subs	r4, r1, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	bfb8      	it	lt
 800240e:	18e4      	addlt	r4, r4, r3
 8002410:	f000 f8de 	bl	80025d0 <__malloc_lock>
 8002414:	4a1c      	ldr	r2, [pc, #112]	@ (8002488 <_free_r+0x8c>)
 8002416:	6813      	ldr	r3, [r2, #0]
 8002418:	b933      	cbnz	r3, 8002428 <_free_r+0x2c>
 800241a:	6063      	str	r3, [r4, #4]
 800241c:	6014      	str	r4, [r2, #0]
 800241e:	4628      	mov	r0, r5
 8002420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002424:	f000 b8da 	b.w	80025dc <__malloc_unlock>
 8002428:	42a3      	cmp	r3, r4
 800242a:	d908      	bls.n	800243e <_free_r+0x42>
 800242c:	6820      	ldr	r0, [r4, #0]
 800242e:	1821      	adds	r1, r4, r0
 8002430:	428b      	cmp	r3, r1
 8002432:	bf01      	itttt	eq
 8002434:	6819      	ldreq	r1, [r3, #0]
 8002436:	685b      	ldreq	r3, [r3, #4]
 8002438:	1809      	addeq	r1, r1, r0
 800243a:	6021      	streq	r1, [r4, #0]
 800243c:	e7ed      	b.n	800241a <_free_r+0x1e>
 800243e:	461a      	mov	r2, r3
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	b10b      	cbz	r3, 8002448 <_free_r+0x4c>
 8002444:	42a3      	cmp	r3, r4
 8002446:	d9fa      	bls.n	800243e <_free_r+0x42>
 8002448:	6811      	ldr	r1, [r2, #0]
 800244a:	1850      	adds	r0, r2, r1
 800244c:	42a0      	cmp	r0, r4
 800244e:	d10b      	bne.n	8002468 <_free_r+0x6c>
 8002450:	6820      	ldr	r0, [r4, #0]
 8002452:	4401      	add	r1, r0
 8002454:	1850      	adds	r0, r2, r1
 8002456:	4283      	cmp	r3, r0
 8002458:	6011      	str	r1, [r2, #0]
 800245a:	d1e0      	bne.n	800241e <_free_r+0x22>
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4408      	add	r0, r1
 8002462:	6010      	str	r0, [r2, #0]
 8002464:	6053      	str	r3, [r2, #4]
 8002466:	e7da      	b.n	800241e <_free_r+0x22>
 8002468:	d902      	bls.n	8002470 <_free_r+0x74>
 800246a:	230c      	movs	r3, #12
 800246c:	602b      	str	r3, [r5, #0]
 800246e:	e7d6      	b.n	800241e <_free_r+0x22>
 8002470:	6820      	ldr	r0, [r4, #0]
 8002472:	1821      	adds	r1, r4, r0
 8002474:	428b      	cmp	r3, r1
 8002476:	bf01      	itttt	eq
 8002478:	6819      	ldreq	r1, [r3, #0]
 800247a:	685b      	ldreq	r3, [r3, #4]
 800247c:	1809      	addeq	r1, r1, r0
 800247e:	6021      	streq	r1, [r4, #0]
 8002480:	6063      	str	r3, [r4, #4]
 8002482:	6054      	str	r4, [r2, #4]
 8002484:	e7cb      	b.n	800241e <_free_r+0x22>
 8002486:	bd38      	pop	{r3, r4, r5, pc}
 8002488:	20000448 	.word	0x20000448

0800248c <sbrk_aligned>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	4e0f      	ldr	r6, [pc, #60]	@ (80024cc <sbrk_aligned+0x40>)
 8002490:	460c      	mov	r4, r1
 8002492:	6831      	ldr	r1, [r6, #0]
 8002494:	4605      	mov	r5, r0
 8002496:	b911      	cbnz	r1, 800249e <sbrk_aligned+0x12>
 8002498:	f000 fcb4 	bl	8002e04 <_sbrk_r>
 800249c:	6030      	str	r0, [r6, #0]
 800249e:	4621      	mov	r1, r4
 80024a0:	4628      	mov	r0, r5
 80024a2:	f000 fcaf 	bl	8002e04 <_sbrk_r>
 80024a6:	1c43      	adds	r3, r0, #1
 80024a8:	d103      	bne.n	80024b2 <sbrk_aligned+0x26>
 80024aa:	f04f 34ff 	mov.w	r4, #4294967295
 80024ae:	4620      	mov	r0, r4
 80024b0:	bd70      	pop	{r4, r5, r6, pc}
 80024b2:	1cc4      	adds	r4, r0, #3
 80024b4:	f024 0403 	bic.w	r4, r4, #3
 80024b8:	42a0      	cmp	r0, r4
 80024ba:	d0f8      	beq.n	80024ae <sbrk_aligned+0x22>
 80024bc:	1a21      	subs	r1, r4, r0
 80024be:	4628      	mov	r0, r5
 80024c0:	f000 fca0 	bl	8002e04 <_sbrk_r>
 80024c4:	3001      	adds	r0, #1
 80024c6:	d1f2      	bne.n	80024ae <sbrk_aligned+0x22>
 80024c8:	e7ef      	b.n	80024aa <sbrk_aligned+0x1e>
 80024ca:	bf00      	nop
 80024cc:	20000444 	.word	0x20000444

080024d0 <_malloc_r>:
 80024d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024d4:	1ccd      	adds	r5, r1, #3
 80024d6:	f025 0503 	bic.w	r5, r5, #3
 80024da:	3508      	adds	r5, #8
 80024dc:	2d0c      	cmp	r5, #12
 80024de:	bf38      	it	cc
 80024e0:	250c      	movcc	r5, #12
 80024e2:	2d00      	cmp	r5, #0
 80024e4:	4606      	mov	r6, r0
 80024e6:	db01      	blt.n	80024ec <_malloc_r+0x1c>
 80024e8:	42a9      	cmp	r1, r5
 80024ea:	d904      	bls.n	80024f6 <_malloc_r+0x26>
 80024ec:	230c      	movs	r3, #12
 80024ee:	6033      	str	r3, [r6, #0]
 80024f0:	2000      	movs	r0, #0
 80024f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80025cc <_malloc_r+0xfc>
 80024fa:	f000 f869 	bl	80025d0 <__malloc_lock>
 80024fe:	f8d8 3000 	ldr.w	r3, [r8]
 8002502:	461c      	mov	r4, r3
 8002504:	bb44      	cbnz	r4, 8002558 <_malloc_r+0x88>
 8002506:	4629      	mov	r1, r5
 8002508:	4630      	mov	r0, r6
 800250a:	f7ff ffbf 	bl	800248c <sbrk_aligned>
 800250e:	1c43      	adds	r3, r0, #1
 8002510:	4604      	mov	r4, r0
 8002512:	d158      	bne.n	80025c6 <_malloc_r+0xf6>
 8002514:	f8d8 4000 	ldr.w	r4, [r8]
 8002518:	4627      	mov	r7, r4
 800251a:	2f00      	cmp	r7, #0
 800251c:	d143      	bne.n	80025a6 <_malloc_r+0xd6>
 800251e:	2c00      	cmp	r4, #0
 8002520:	d04b      	beq.n	80025ba <_malloc_r+0xea>
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	4639      	mov	r1, r7
 8002526:	4630      	mov	r0, r6
 8002528:	eb04 0903 	add.w	r9, r4, r3
 800252c:	f000 fc6a 	bl	8002e04 <_sbrk_r>
 8002530:	4581      	cmp	r9, r0
 8002532:	d142      	bne.n	80025ba <_malloc_r+0xea>
 8002534:	6821      	ldr	r1, [r4, #0]
 8002536:	4630      	mov	r0, r6
 8002538:	1a6d      	subs	r5, r5, r1
 800253a:	4629      	mov	r1, r5
 800253c:	f7ff ffa6 	bl	800248c <sbrk_aligned>
 8002540:	3001      	adds	r0, #1
 8002542:	d03a      	beq.n	80025ba <_malloc_r+0xea>
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	442b      	add	r3, r5
 8002548:	6023      	str	r3, [r4, #0]
 800254a:	f8d8 3000 	ldr.w	r3, [r8]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	bb62      	cbnz	r2, 80025ac <_malloc_r+0xdc>
 8002552:	f8c8 7000 	str.w	r7, [r8]
 8002556:	e00f      	b.n	8002578 <_malloc_r+0xa8>
 8002558:	6822      	ldr	r2, [r4, #0]
 800255a:	1b52      	subs	r2, r2, r5
 800255c:	d420      	bmi.n	80025a0 <_malloc_r+0xd0>
 800255e:	2a0b      	cmp	r2, #11
 8002560:	d917      	bls.n	8002592 <_malloc_r+0xc2>
 8002562:	1961      	adds	r1, r4, r5
 8002564:	42a3      	cmp	r3, r4
 8002566:	6025      	str	r5, [r4, #0]
 8002568:	bf18      	it	ne
 800256a:	6059      	strne	r1, [r3, #4]
 800256c:	6863      	ldr	r3, [r4, #4]
 800256e:	bf08      	it	eq
 8002570:	f8c8 1000 	streq.w	r1, [r8]
 8002574:	5162      	str	r2, [r4, r5]
 8002576:	604b      	str	r3, [r1, #4]
 8002578:	4630      	mov	r0, r6
 800257a:	f000 f82f 	bl	80025dc <__malloc_unlock>
 800257e:	f104 000b 	add.w	r0, r4, #11
 8002582:	1d23      	adds	r3, r4, #4
 8002584:	f020 0007 	bic.w	r0, r0, #7
 8002588:	1ac2      	subs	r2, r0, r3
 800258a:	bf1c      	itt	ne
 800258c:	1a1b      	subne	r3, r3, r0
 800258e:	50a3      	strne	r3, [r4, r2]
 8002590:	e7af      	b.n	80024f2 <_malloc_r+0x22>
 8002592:	6862      	ldr	r2, [r4, #4]
 8002594:	42a3      	cmp	r3, r4
 8002596:	bf0c      	ite	eq
 8002598:	f8c8 2000 	streq.w	r2, [r8]
 800259c:	605a      	strne	r2, [r3, #4]
 800259e:	e7eb      	b.n	8002578 <_malloc_r+0xa8>
 80025a0:	4623      	mov	r3, r4
 80025a2:	6864      	ldr	r4, [r4, #4]
 80025a4:	e7ae      	b.n	8002504 <_malloc_r+0x34>
 80025a6:	463c      	mov	r4, r7
 80025a8:	687f      	ldr	r7, [r7, #4]
 80025aa:	e7b6      	b.n	800251a <_malloc_r+0x4a>
 80025ac:	461a      	mov	r2, r3
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	42a3      	cmp	r3, r4
 80025b2:	d1fb      	bne.n	80025ac <_malloc_r+0xdc>
 80025b4:	2300      	movs	r3, #0
 80025b6:	6053      	str	r3, [r2, #4]
 80025b8:	e7de      	b.n	8002578 <_malloc_r+0xa8>
 80025ba:	230c      	movs	r3, #12
 80025bc:	4630      	mov	r0, r6
 80025be:	6033      	str	r3, [r6, #0]
 80025c0:	f000 f80c 	bl	80025dc <__malloc_unlock>
 80025c4:	e794      	b.n	80024f0 <_malloc_r+0x20>
 80025c6:	6005      	str	r5, [r0, #0]
 80025c8:	e7d6      	b.n	8002578 <_malloc_r+0xa8>
 80025ca:	bf00      	nop
 80025cc:	20000448 	.word	0x20000448

080025d0 <__malloc_lock>:
 80025d0:	4801      	ldr	r0, [pc, #4]	@ (80025d8 <__malloc_lock+0x8>)
 80025d2:	f7ff bf10 	b.w	80023f6 <__retarget_lock_acquire_recursive>
 80025d6:	bf00      	nop
 80025d8:	20000440 	.word	0x20000440

080025dc <__malloc_unlock>:
 80025dc:	4801      	ldr	r0, [pc, #4]	@ (80025e4 <__malloc_unlock+0x8>)
 80025de:	f7ff bf0b 	b.w	80023f8 <__retarget_lock_release_recursive>
 80025e2:	bf00      	nop
 80025e4:	20000440 	.word	0x20000440

080025e8 <__sfputc_r>:
 80025e8:	6893      	ldr	r3, [r2, #8]
 80025ea:	b410      	push	{r4}
 80025ec:	3b01      	subs	r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	6093      	str	r3, [r2, #8]
 80025f2:	da07      	bge.n	8002604 <__sfputc_r+0x1c>
 80025f4:	6994      	ldr	r4, [r2, #24]
 80025f6:	42a3      	cmp	r3, r4
 80025f8:	db01      	blt.n	80025fe <__sfputc_r+0x16>
 80025fa:	290a      	cmp	r1, #10
 80025fc:	d102      	bne.n	8002604 <__sfputc_r+0x1c>
 80025fe:	bc10      	pop	{r4}
 8002600:	f000 bb6c 	b.w	8002cdc <__swbuf_r>
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	1c58      	adds	r0, r3, #1
 8002608:	6010      	str	r0, [r2, #0]
 800260a:	7019      	strb	r1, [r3, #0]
 800260c:	4608      	mov	r0, r1
 800260e:	bc10      	pop	{r4}
 8002610:	4770      	bx	lr

08002612 <__sfputs_r>:
 8002612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002614:	4606      	mov	r6, r0
 8002616:	460f      	mov	r7, r1
 8002618:	4614      	mov	r4, r2
 800261a:	18d5      	adds	r5, r2, r3
 800261c:	42ac      	cmp	r4, r5
 800261e:	d101      	bne.n	8002624 <__sfputs_r+0x12>
 8002620:	2000      	movs	r0, #0
 8002622:	e007      	b.n	8002634 <__sfputs_r+0x22>
 8002624:	463a      	mov	r2, r7
 8002626:	4630      	mov	r0, r6
 8002628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800262c:	f7ff ffdc 	bl	80025e8 <__sfputc_r>
 8002630:	1c43      	adds	r3, r0, #1
 8002632:	d1f3      	bne.n	800261c <__sfputs_r+0xa>
 8002634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002638 <_vfiprintf_r>:
 8002638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800263c:	460d      	mov	r5, r1
 800263e:	4614      	mov	r4, r2
 8002640:	4698      	mov	r8, r3
 8002642:	4606      	mov	r6, r0
 8002644:	b09d      	sub	sp, #116	@ 0x74
 8002646:	b118      	cbz	r0, 8002650 <_vfiprintf_r+0x18>
 8002648:	6a03      	ldr	r3, [r0, #32]
 800264a:	b90b      	cbnz	r3, 8002650 <_vfiprintf_r+0x18>
 800264c:	f7ff fdce 	bl	80021ec <__sinit>
 8002650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002652:	07d9      	lsls	r1, r3, #31
 8002654:	d405      	bmi.n	8002662 <_vfiprintf_r+0x2a>
 8002656:	89ab      	ldrh	r3, [r5, #12]
 8002658:	059a      	lsls	r2, r3, #22
 800265a:	d402      	bmi.n	8002662 <_vfiprintf_r+0x2a>
 800265c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800265e:	f7ff feca 	bl	80023f6 <__retarget_lock_acquire_recursive>
 8002662:	89ab      	ldrh	r3, [r5, #12]
 8002664:	071b      	lsls	r3, r3, #28
 8002666:	d501      	bpl.n	800266c <_vfiprintf_r+0x34>
 8002668:	692b      	ldr	r3, [r5, #16]
 800266a:	b99b      	cbnz	r3, 8002694 <_vfiprintf_r+0x5c>
 800266c:	4629      	mov	r1, r5
 800266e:	4630      	mov	r0, r6
 8002670:	f000 fb72 	bl	8002d58 <__swsetup_r>
 8002674:	b170      	cbz	r0, 8002694 <_vfiprintf_r+0x5c>
 8002676:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002678:	07dc      	lsls	r4, r3, #31
 800267a:	d504      	bpl.n	8002686 <_vfiprintf_r+0x4e>
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	b01d      	add	sp, #116	@ 0x74
 8002682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002686:	89ab      	ldrh	r3, [r5, #12]
 8002688:	0598      	lsls	r0, r3, #22
 800268a:	d4f7      	bmi.n	800267c <_vfiprintf_r+0x44>
 800268c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800268e:	f7ff feb3 	bl	80023f8 <__retarget_lock_release_recursive>
 8002692:	e7f3      	b.n	800267c <_vfiprintf_r+0x44>
 8002694:	2300      	movs	r3, #0
 8002696:	9309      	str	r3, [sp, #36]	@ 0x24
 8002698:	2320      	movs	r3, #32
 800269a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800269e:	2330      	movs	r3, #48	@ 0x30
 80026a0:	f04f 0901 	mov.w	r9, #1
 80026a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80026a8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002854 <_vfiprintf_r+0x21c>
 80026ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80026b0:	4623      	mov	r3, r4
 80026b2:	469a      	mov	sl, r3
 80026b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026b8:	b10a      	cbz	r2, 80026be <_vfiprintf_r+0x86>
 80026ba:	2a25      	cmp	r2, #37	@ 0x25
 80026bc:	d1f9      	bne.n	80026b2 <_vfiprintf_r+0x7a>
 80026be:	ebba 0b04 	subs.w	fp, sl, r4
 80026c2:	d00b      	beq.n	80026dc <_vfiprintf_r+0xa4>
 80026c4:	465b      	mov	r3, fp
 80026c6:	4622      	mov	r2, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	4630      	mov	r0, r6
 80026cc:	f7ff ffa1 	bl	8002612 <__sfputs_r>
 80026d0:	3001      	adds	r0, #1
 80026d2:	f000 80a7 	beq.w	8002824 <_vfiprintf_r+0x1ec>
 80026d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80026d8:	445a      	add	r2, fp
 80026da:	9209      	str	r2, [sp, #36]	@ 0x24
 80026dc:	f89a 3000 	ldrb.w	r3, [sl]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 809f 	beq.w	8002824 <_vfiprintf_r+0x1ec>
 80026e6:	2300      	movs	r3, #0
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026f0:	f10a 0a01 	add.w	sl, sl, #1
 80026f4:	9304      	str	r3, [sp, #16]
 80026f6:	9307      	str	r3, [sp, #28]
 80026f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80026fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80026fe:	4654      	mov	r4, sl
 8002700:	2205      	movs	r2, #5
 8002702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002706:	4853      	ldr	r0, [pc, #332]	@ (8002854 <_vfiprintf_r+0x21c>)
 8002708:	f000 fb8c 	bl	8002e24 <memchr>
 800270c:	9a04      	ldr	r2, [sp, #16]
 800270e:	b9d8      	cbnz	r0, 8002748 <_vfiprintf_r+0x110>
 8002710:	06d1      	lsls	r1, r2, #27
 8002712:	bf44      	itt	mi
 8002714:	2320      	movmi	r3, #32
 8002716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800271a:	0713      	lsls	r3, r2, #28
 800271c:	bf44      	itt	mi
 800271e:	232b      	movmi	r3, #43	@ 0x2b
 8002720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002724:	f89a 3000 	ldrb.w	r3, [sl]
 8002728:	2b2a      	cmp	r3, #42	@ 0x2a
 800272a:	d015      	beq.n	8002758 <_vfiprintf_r+0x120>
 800272c:	4654      	mov	r4, sl
 800272e:	2000      	movs	r0, #0
 8002730:	f04f 0c0a 	mov.w	ip, #10
 8002734:	9a07      	ldr	r2, [sp, #28]
 8002736:	4621      	mov	r1, r4
 8002738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800273c:	3b30      	subs	r3, #48	@ 0x30
 800273e:	2b09      	cmp	r3, #9
 8002740:	d94b      	bls.n	80027da <_vfiprintf_r+0x1a2>
 8002742:	b1b0      	cbz	r0, 8002772 <_vfiprintf_r+0x13a>
 8002744:	9207      	str	r2, [sp, #28]
 8002746:	e014      	b.n	8002772 <_vfiprintf_r+0x13a>
 8002748:	eba0 0308 	sub.w	r3, r0, r8
 800274c:	fa09 f303 	lsl.w	r3, r9, r3
 8002750:	4313      	orrs	r3, r2
 8002752:	46a2      	mov	sl, r4
 8002754:	9304      	str	r3, [sp, #16]
 8002756:	e7d2      	b.n	80026fe <_vfiprintf_r+0xc6>
 8002758:	9b03      	ldr	r3, [sp, #12]
 800275a:	1d19      	adds	r1, r3, #4
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	9103      	str	r1, [sp, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	bfbb      	ittet	lt
 8002764:	425b      	neglt	r3, r3
 8002766:	f042 0202 	orrlt.w	r2, r2, #2
 800276a:	9307      	strge	r3, [sp, #28]
 800276c:	9307      	strlt	r3, [sp, #28]
 800276e:	bfb8      	it	lt
 8002770:	9204      	strlt	r2, [sp, #16]
 8002772:	7823      	ldrb	r3, [r4, #0]
 8002774:	2b2e      	cmp	r3, #46	@ 0x2e
 8002776:	d10a      	bne.n	800278e <_vfiprintf_r+0x156>
 8002778:	7863      	ldrb	r3, [r4, #1]
 800277a:	2b2a      	cmp	r3, #42	@ 0x2a
 800277c:	d132      	bne.n	80027e4 <_vfiprintf_r+0x1ac>
 800277e:	9b03      	ldr	r3, [sp, #12]
 8002780:	3402      	adds	r4, #2
 8002782:	1d1a      	adds	r2, r3, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	9203      	str	r2, [sp, #12]
 8002788:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800278c:	9305      	str	r3, [sp, #20]
 800278e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002858 <_vfiprintf_r+0x220>
 8002792:	2203      	movs	r2, #3
 8002794:	4650      	mov	r0, sl
 8002796:	7821      	ldrb	r1, [r4, #0]
 8002798:	f000 fb44 	bl	8002e24 <memchr>
 800279c:	b138      	cbz	r0, 80027ae <_vfiprintf_r+0x176>
 800279e:	2240      	movs	r2, #64	@ 0x40
 80027a0:	9b04      	ldr	r3, [sp, #16]
 80027a2:	eba0 000a 	sub.w	r0, r0, sl
 80027a6:	4082      	lsls	r2, r0
 80027a8:	4313      	orrs	r3, r2
 80027aa:	3401      	adds	r4, #1
 80027ac:	9304      	str	r3, [sp, #16]
 80027ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027b2:	2206      	movs	r2, #6
 80027b4:	4829      	ldr	r0, [pc, #164]	@ (800285c <_vfiprintf_r+0x224>)
 80027b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80027ba:	f000 fb33 	bl	8002e24 <memchr>
 80027be:	2800      	cmp	r0, #0
 80027c0:	d03f      	beq.n	8002842 <_vfiprintf_r+0x20a>
 80027c2:	4b27      	ldr	r3, [pc, #156]	@ (8002860 <_vfiprintf_r+0x228>)
 80027c4:	bb1b      	cbnz	r3, 800280e <_vfiprintf_r+0x1d6>
 80027c6:	9b03      	ldr	r3, [sp, #12]
 80027c8:	3307      	adds	r3, #7
 80027ca:	f023 0307 	bic.w	r3, r3, #7
 80027ce:	3308      	adds	r3, #8
 80027d0:	9303      	str	r3, [sp, #12]
 80027d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80027d4:	443b      	add	r3, r7
 80027d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80027d8:	e76a      	b.n	80026b0 <_vfiprintf_r+0x78>
 80027da:	460c      	mov	r4, r1
 80027dc:	2001      	movs	r0, #1
 80027de:	fb0c 3202 	mla	r2, ip, r2, r3
 80027e2:	e7a8      	b.n	8002736 <_vfiprintf_r+0xfe>
 80027e4:	2300      	movs	r3, #0
 80027e6:	f04f 0c0a 	mov.w	ip, #10
 80027ea:	4619      	mov	r1, r3
 80027ec:	3401      	adds	r4, #1
 80027ee:	9305      	str	r3, [sp, #20]
 80027f0:	4620      	mov	r0, r4
 80027f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027f6:	3a30      	subs	r2, #48	@ 0x30
 80027f8:	2a09      	cmp	r2, #9
 80027fa:	d903      	bls.n	8002804 <_vfiprintf_r+0x1cc>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0c6      	beq.n	800278e <_vfiprintf_r+0x156>
 8002800:	9105      	str	r1, [sp, #20]
 8002802:	e7c4      	b.n	800278e <_vfiprintf_r+0x156>
 8002804:	4604      	mov	r4, r0
 8002806:	2301      	movs	r3, #1
 8002808:	fb0c 2101 	mla	r1, ip, r1, r2
 800280c:	e7f0      	b.n	80027f0 <_vfiprintf_r+0x1b8>
 800280e:	ab03      	add	r3, sp, #12
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	462a      	mov	r2, r5
 8002814:	4630      	mov	r0, r6
 8002816:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <_vfiprintf_r+0x22c>)
 8002818:	a904      	add	r1, sp, #16
 800281a:	f3af 8000 	nop.w
 800281e:	4607      	mov	r7, r0
 8002820:	1c78      	adds	r0, r7, #1
 8002822:	d1d6      	bne.n	80027d2 <_vfiprintf_r+0x19a>
 8002824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002826:	07d9      	lsls	r1, r3, #31
 8002828:	d405      	bmi.n	8002836 <_vfiprintf_r+0x1fe>
 800282a:	89ab      	ldrh	r3, [r5, #12]
 800282c:	059a      	lsls	r2, r3, #22
 800282e:	d402      	bmi.n	8002836 <_vfiprintf_r+0x1fe>
 8002830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002832:	f7ff fde1 	bl	80023f8 <__retarget_lock_release_recursive>
 8002836:	89ab      	ldrh	r3, [r5, #12]
 8002838:	065b      	lsls	r3, r3, #25
 800283a:	f53f af1f 	bmi.w	800267c <_vfiprintf_r+0x44>
 800283e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002840:	e71e      	b.n	8002680 <_vfiprintf_r+0x48>
 8002842:	ab03      	add	r3, sp, #12
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	462a      	mov	r2, r5
 8002848:	4630      	mov	r0, r6
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <_vfiprintf_r+0x22c>)
 800284c:	a904      	add	r1, sp, #16
 800284e:	f000 f87d 	bl	800294c <_printf_i>
 8002852:	e7e4      	b.n	800281e <_vfiprintf_r+0x1e6>
 8002854:	08002fd2 	.word	0x08002fd2
 8002858:	08002fd8 	.word	0x08002fd8
 800285c:	08002fdc 	.word	0x08002fdc
 8002860:	00000000 	.word	0x00000000
 8002864:	08002613 	.word	0x08002613

08002868 <_printf_common>:
 8002868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800286c:	4616      	mov	r6, r2
 800286e:	4698      	mov	r8, r3
 8002870:	688a      	ldr	r2, [r1, #8]
 8002872:	690b      	ldr	r3, [r1, #16]
 8002874:	4607      	mov	r7, r0
 8002876:	4293      	cmp	r3, r2
 8002878:	bfb8      	it	lt
 800287a:	4613      	movlt	r3, r2
 800287c:	6033      	str	r3, [r6, #0]
 800287e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002882:	460c      	mov	r4, r1
 8002884:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002888:	b10a      	cbz	r2, 800288e <_printf_common+0x26>
 800288a:	3301      	adds	r3, #1
 800288c:	6033      	str	r3, [r6, #0]
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	0699      	lsls	r1, r3, #26
 8002892:	bf42      	ittt	mi
 8002894:	6833      	ldrmi	r3, [r6, #0]
 8002896:	3302      	addmi	r3, #2
 8002898:	6033      	strmi	r3, [r6, #0]
 800289a:	6825      	ldr	r5, [r4, #0]
 800289c:	f015 0506 	ands.w	r5, r5, #6
 80028a0:	d106      	bne.n	80028b0 <_printf_common+0x48>
 80028a2:	f104 0a19 	add.w	sl, r4, #25
 80028a6:	68e3      	ldr	r3, [r4, #12]
 80028a8:	6832      	ldr	r2, [r6, #0]
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	42ab      	cmp	r3, r5
 80028ae:	dc2b      	bgt.n	8002908 <_printf_common+0xa0>
 80028b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80028b4:	6822      	ldr	r2, [r4, #0]
 80028b6:	3b00      	subs	r3, #0
 80028b8:	bf18      	it	ne
 80028ba:	2301      	movne	r3, #1
 80028bc:	0692      	lsls	r2, r2, #26
 80028be:	d430      	bmi.n	8002922 <_printf_common+0xba>
 80028c0:	4641      	mov	r1, r8
 80028c2:	4638      	mov	r0, r7
 80028c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80028c8:	47c8      	blx	r9
 80028ca:	3001      	adds	r0, #1
 80028cc:	d023      	beq.n	8002916 <_printf_common+0xae>
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	6922      	ldr	r2, [r4, #16]
 80028d2:	f003 0306 	and.w	r3, r3, #6
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	bf14      	ite	ne
 80028da:	2500      	movne	r5, #0
 80028dc:	6833      	ldreq	r3, [r6, #0]
 80028de:	f04f 0600 	mov.w	r6, #0
 80028e2:	bf08      	it	eq
 80028e4:	68e5      	ldreq	r5, [r4, #12]
 80028e6:	f104 041a 	add.w	r4, r4, #26
 80028ea:	bf08      	it	eq
 80028ec:	1aed      	subeq	r5, r5, r3
 80028ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80028f2:	bf08      	it	eq
 80028f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028f8:	4293      	cmp	r3, r2
 80028fa:	bfc4      	itt	gt
 80028fc:	1a9b      	subgt	r3, r3, r2
 80028fe:	18ed      	addgt	r5, r5, r3
 8002900:	42b5      	cmp	r5, r6
 8002902:	d11a      	bne.n	800293a <_printf_common+0xd2>
 8002904:	2000      	movs	r0, #0
 8002906:	e008      	b.n	800291a <_printf_common+0xb2>
 8002908:	2301      	movs	r3, #1
 800290a:	4652      	mov	r2, sl
 800290c:	4641      	mov	r1, r8
 800290e:	4638      	mov	r0, r7
 8002910:	47c8      	blx	r9
 8002912:	3001      	adds	r0, #1
 8002914:	d103      	bne.n	800291e <_printf_common+0xb6>
 8002916:	f04f 30ff 	mov.w	r0, #4294967295
 800291a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800291e:	3501      	adds	r5, #1
 8002920:	e7c1      	b.n	80028a6 <_printf_common+0x3e>
 8002922:	2030      	movs	r0, #48	@ 0x30
 8002924:	18e1      	adds	r1, r4, r3
 8002926:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002930:	4422      	add	r2, r4
 8002932:	3302      	adds	r3, #2
 8002934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002938:	e7c2      	b.n	80028c0 <_printf_common+0x58>
 800293a:	2301      	movs	r3, #1
 800293c:	4622      	mov	r2, r4
 800293e:	4641      	mov	r1, r8
 8002940:	4638      	mov	r0, r7
 8002942:	47c8      	blx	r9
 8002944:	3001      	adds	r0, #1
 8002946:	d0e6      	beq.n	8002916 <_printf_common+0xae>
 8002948:	3601      	adds	r6, #1
 800294a:	e7d9      	b.n	8002900 <_printf_common+0x98>

0800294c <_printf_i>:
 800294c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002950:	7e0f      	ldrb	r7, [r1, #24]
 8002952:	4691      	mov	r9, r2
 8002954:	2f78      	cmp	r7, #120	@ 0x78
 8002956:	4680      	mov	r8, r0
 8002958:	460c      	mov	r4, r1
 800295a:	469a      	mov	sl, r3
 800295c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800295e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002962:	d807      	bhi.n	8002974 <_printf_i+0x28>
 8002964:	2f62      	cmp	r7, #98	@ 0x62
 8002966:	d80a      	bhi.n	800297e <_printf_i+0x32>
 8002968:	2f00      	cmp	r7, #0
 800296a:	f000 80d3 	beq.w	8002b14 <_printf_i+0x1c8>
 800296e:	2f58      	cmp	r7, #88	@ 0x58
 8002970:	f000 80ba 	beq.w	8002ae8 <_printf_i+0x19c>
 8002974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002978:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800297c:	e03a      	b.n	80029f4 <_printf_i+0xa8>
 800297e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002982:	2b15      	cmp	r3, #21
 8002984:	d8f6      	bhi.n	8002974 <_printf_i+0x28>
 8002986:	a101      	add	r1, pc, #4	@ (adr r1, 800298c <_printf_i+0x40>)
 8002988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800298c:	080029e5 	.word	0x080029e5
 8002990:	080029f9 	.word	0x080029f9
 8002994:	08002975 	.word	0x08002975
 8002998:	08002975 	.word	0x08002975
 800299c:	08002975 	.word	0x08002975
 80029a0:	08002975 	.word	0x08002975
 80029a4:	080029f9 	.word	0x080029f9
 80029a8:	08002975 	.word	0x08002975
 80029ac:	08002975 	.word	0x08002975
 80029b0:	08002975 	.word	0x08002975
 80029b4:	08002975 	.word	0x08002975
 80029b8:	08002afb 	.word	0x08002afb
 80029bc:	08002a23 	.word	0x08002a23
 80029c0:	08002ab5 	.word	0x08002ab5
 80029c4:	08002975 	.word	0x08002975
 80029c8:	08002975 	.word	0x08002975
 80029cc:	08002b1d 	.word	0x08002b1d
 80029d0:	08002975 	.word	0x08002975
 80029d4:	08002a23 	.word	0x08002a23
 80029d8:	08002975 	.word	0x08002975
 80029dc:	08002975 	.word	0x08002975
 80029e0:	08002abd 	.word	0x08002abd
 80029e4:	6833      	ldr	r3, [r6, #0]
 80029e6:	1d1a      	adds	r2, r3, #4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6032      	str	r2, [r6, #0]
 80029ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80029f4:	2301      	movs	r3, #1
 80029f6:	e09e      	b.n	8002b36 <_printf_i+0x1ea>
 80029f8:	6833      	ldr	r3, [r6, #0]
 80029fa:	6820      	ldr	r0, [r4, #0]
 80029fc:	1d19      	adds	r1, r3, #4
 80029fe:	6031      	str	r1, [r6, #0]
 8002a00:	0606      	lsls	r6, r0, #24
 8002a02:	d501      	bpl.n	8002a08 <_printf_i+0xbc>
 8002a04:	681d      	ldr	r5, [r3, #0]
 8002a06:	e003      	b.n	8002a10 <_printf_i+0xc4>
 8002a08:	0645      	lsls	r5, r0, #25
 8002a0a:	d5fb      	bpl.n	8002a04 <_printf_i+0xb8>
 8002a0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a10:	2d00      	cmp	r5, #0
 8002a12:	da03      	bge.n	8002a1c <_printf_i+0xd0>
 8002a14:	232d      	movs	r3, #45	@ 0x2d
 8002a16:	426d      	negs	r5, r5
 8002a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a1c:	230a      	movs	r3, #10
 8002a1e:	4859      	ldr	r0, [pc, #356]	@ (8002b84 <_printf_i+0x238>)
 8002a20:	e011      	b.n	8002a46 <_printf_i+0xfa>
 8002a22:	6821      	ldr	r1, [r4, #0]
 8002a24:	6833      	ldr	r3, [r6, #0]
 8002a26:	0608      	lsls	r0, r1, #24
 8002a28:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a2c:	d402      	bmi.n	8002a34 <_printf_i+0xe8>
 8002a2e:	0649      	lsls	r1, r1, #25
 8002a30:	bf48      	it	mi
 8002a32:	b2ad      	uxthmi	r5, r5
 8002a34:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a36:	6033      	str	r3, [r6, #0]
 8002a38:	bf14      	ite	ne
 8002a3a:	230a      	movne	r3, #10
 8002a3c:	2308      	moveq	r3, #8
 8002a3e:	4851      	ldr	r0, [pc, #324]	@ (8002b84 <_printf_i+0x238>)
 8002a40:	2100      	movs	r1, #0
 8002a42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002a46:	6866      	ldr	r6, [r4, #4]
 8002a48:	2e00      	cmp	r6, #0
 8002a4a:	bfa8      	it	ge
 8002a4c:	6821      	ldrge	r1, [r4, #0]
 8002a4e:	60a6      	str	r6, [r4, #8]
 8002a50:	bfa4      	itt	ge
 8002a52:	f021 0104 	bicge.w	r1, r1, #4
 8002a56:	6021      	strge	r1, [r4, #0]
 8002a58:	b90d      	cbnz	r5, 8002a5e <_printf_i+0x112>
 8002a5a:	2e00      	cmp	r6, #0
 8002a5c:	d04b      	beq.n	8002af6 <_printf_i+0x1aa>
 8002a5e:	4616      	mov	r6, r2
 8002a60:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a64:	fb03 5711 	mls	r7, r3, r1, r5
 8002a68:	5dc7      	ldrb	r7, [r0, r7]
 8002a6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002a6e:	462f      	mov	r7, r5
 8002a70:	42bb      	cmp	r3, r7
 8002a72:	460d      	mov	r5, r1
 8002a74:	d9f4      	bls.n	8002a60 <_printf_i+0x114>
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d10b      	bne.n	8002a92 <_printf_i+0x146>
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	07df      	lsls	r7, r3, #31
 8002a7e:	d508      	bpl.n	8002a92 <_printf_i+0x146>
 8002a80:	6923      	ldr	r3, [r4, #16]
 8002a82:	6861      	ldr	r1, [r4, #4]
 8002a84:	4299      	cmp	r1, r3
 8002a86:	bfde      	ittt	le
 8002a88:	2330      	movle	r3, #48	@ 0x30
 8002a8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002a92:	1b92      	subs	r2, r2, r6
 8002a94:	6122      	str	r2, [r4, #16]
 8002a96:	464b      	mov	r3, r9
 8002a98:	4621      	mov	r1, r4
 8002a9a:	4640      	mov	r0, r8
 8002a9c:	f8cd a000 	str.w	sl, [sp]
 8002aa0:	aa03      	add	r2, sp, #12
 8002aa2:	f7ff fee1 	bl	8002868 <_printf_common>
 8002aa6:	3001      	adds	r0, #1
 8002aa8:	d14a      	bne.n	8002b40 <_printf_i+0x1f4>
 8002aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8002aae:	b004      	add	sp, #16
 8002ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	f043 0320 	orr.w	r3, r3, #32
 8002aba:	6023      	str	r3, [r4, #0]
 8002abc:	2778      	movs	r7, #120	@ 0x78
 8002abe:	4832      	ldr	r0, [pc, #200]	@ (8002b88 <_printf_i+0x23c>)
 8002ac0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	6831      	ldr	r1, [r6, #0]
 8002ac8:	061f      	lsls	r7, r3, #24
 8002aca:	f851 5b04 	ldr.w	r5, [r1], #4
 8002ace:	d402      	bmi.n	8002ad6 <_printf_i+0x18a>
 8002ad0:	065f      	lsls	r7, r3, #25
 8002ad2:	bf48      	it	mi
 8002ad4:	b2ad      	uxthmi	r5, r5
 8002ad6:	6031      	str	r1, [r6, #0]
 8002ad8:	07d9      	lsls	r1, r3, #31
 8002ada:	bf44      	itt	mi
 8002adc:	f043 0320 	orrmi.w	r3, r3, #32
 8002ae0:	6023      	strmi	r3, [r4, #0]
 8002ae2:	b11d      	cbz	r5, 8002aec <_printf_i+0x1a0>
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	e7ab      	b.n	8002a40 <_printf_i+0xf4>
 8002ae8:	4826      	ldr	r0, [pc, #152]	@ (8002b84 <_printf_i+0x238>)
 8002aea:	e7e9      	b.n	8002ac0 <_printf_i+0x174>
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	f023 0320 	bic.w	r3, r3, #32
 8002af2:	6023      	str	r3, [r4, #0]
 8002af4:	e7f6      	b.n	8002ae4 <_printf_i+0x198>
 8002af6:	4616      	mov	r6, r2
 8002af8:	e7bd      	b.n	8002a76 <_printf_i+0x12a>
 8002afa:	6833      	ldr	r3, [r6, #0]
 8002afc:	6825      	ldr	r5, [r4, #0]
 8002afe:	1d18      	adds	r0, r3, #4
 8002b00:	6961      	ldr	r1, [r4, #20]
 8002b02:	6030      	str	r0, [r6, #0]
 8002b04:	062e      	lsls	r6, r5, #24
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	d501      	bpl.n	8002b0e <_printf_i+0x1c2>
 8002b0a:	6019      	str	r1, [r3, #0]
 8002b0c:	e002      	b.n	8002b14 <_printf_i+0x1c8>
 8002b0e:	0668      	lsls	r0, r5, #25
 8002b10:	d5fb      	bpl.n	8002b0a <_printf_i+0x1be>
 8002b12:	8019      	strh	r1, [r3, #0]
 8002b14:	2300      	movs	r3, #0
 8002b16:	4616      	mov	r6, r2
 8002b18:	6123      	str	r3, [r4, #16]
 8002b1a:	e7bc      	b.n	8002a96 <_printf_i+0x14a>
 8002b1c:	6833      	ldr	r3, [r6, #0]
 8002b1e:	2100      	movs	r1, #0
 8002b20:	1d1a      	adds	r2, r3, #4
 8002b22:	6032      	str	r2, [r6, #0]
 8002b24:	681e      	ldr	r6, [r3, #0]
 8002b26:	6862      	ldr	r2, [r4, #4]
 8002b28:	4630      	mov	r0, r6
 8002b2a:	f000 f97b 	bl	8002e24 <memchr>
 8002b2e:	b108      	cbz	r0, 8002b34 <_printf_i+0x1e8>
 8002b30:	1b80      	subs	r0, r0, r6
 8002b32:	6060      	str	r0, [r4, #4]
 8002b34:	6863      	ldr	r3, [r4, #4]
 8002b36:	6123      	str	r3, [r4, #16]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b3e:	e7aa      	b.n	8002a96 <_printf_i+0x14a>
 8002b40:	4632      	mov	r2, r6
 8002b42:	4649      	mov	r1, r9
 8002b44:	4640      	mov	r0, r8
 8002b46:	6923      	ldr	r3, [r4, #16]
 8002b48:	47d0      	blx	sl
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	d0ad      	beq.n	8002aaa <_printf_i+0x15e>
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	079b      	lsls	r3, r3, #30
 8002b52:	d413      	bmi.n	8002b7c <_printf_i+0x230>
 8002b54:	68e0      	ldr	r0, [r4, #12]
 8002b56:	9b03      	ldr	r3, [sp, #12]
 8002b58:	4298      	cmp	r0, r3
 8002b5a:	bfb8      	it	lt
 8002b5c:	4618      	movlt	r0, r3
 8002b5e:	e7a6      	b.n	8002aae <_printf_i+0x162>
 8002b60:	2301      	movs	r3, #1
 8002b62:	4632      	mov	r2, r6
 8002b64:	4649      	mov	r1, r9
 8002b66:	4640      	mov	r0, r8
 8002b68:	47d0      	blx	sl
 8002b6a:	3001      	adds	r0, #1
 8002b6c:	d09d      	beq.n	8002aaa <_printf_i+0x15e>
 8002b6e:	3501      	adds	r5, #1
 8002b70:	68e3      	ldr	r3, [r4, #12]
 8002b72:	9903      	ldr	r1, [sp, #12]
 8002b74:	1a5b      	subs	r3, r3, r1
 8002b76:	42ab      	cmp	r3, r5
 8002b78:	dcf2      	bgt.n	8002b60 <_printf_i+0x214>
 8002b7a:	e7eb      	b.n	8002b54 <_printf_i+0x208>
 8002b7c:	2500      	movs	r5, #0
 8002b7e:	f104 0619 	add.w	r6, r4, #25
 8002b82:	e7f5      	b.n	8002b70 <_printf_i+0x224>
 8002b84:	08002fe3 	.word	0x08002fe3
 8002b88:	08002ff4 	.word	0x08002ff4

08002b8c <__sflush_r>:
 8002b8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	0716      	lsls	r6, r2, #28
 8002b94:	4605      	mov	r5, r0
 8002b96:	460c      	mov	r4, r1
 8002b98:	d454      	bmi.n	8002c44 <__sflush_r+0xb8>
 8002b9a:	684b      	ldr	r3, [r1, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	dc02      	bgt.n	8002ba6 <__sflush_r+0x1a>
 8002ba0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	dd48      	ble.n	8002c38 <__sflush_r+0xac>
 8002ba6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ba8:	2e00      	cmp	r6, #0
 8002baa:	d045      	beq.n	8002c38 <__sflush_r+0xac>
 8002bac:	2300      	movs	r3, #0
 8002bae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002bb2:	682f      	ldr	r7, [r5, #0]
 8002bb4:	6a21      	ldr	r1, [r4, #32]
 8002bb6:	602b      	str	r3, [r5, #0]
 8002bb8:	d030      	beq.n	8002c1c <__sflush_r+0x90>
 8002bba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	0759      	lsls	r1, r3, #29
 8002bc0:	d505      	bpl.n	8002bce <__sflush_r+0x42>
 8002bc2:	6863      	ldr	r3, [r4, #4]
 8002bc4:	1ad2      	subs	r2, r2, r3
 8002bc6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002bc8:	b10b      	cbz	r3, 8002bce <__sflush_r+0x42>
 8002bca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002bcc:	1ad2      	subs	r2, r2, r3
 8002bce:	2300      	movs	r3, #0
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002bd4:	6a21      	ldr	r1, [r4, #32]
 8002bd6:	47b0      	blx	r6
 8002bd8:	1c43      	adds	r3, r0, #1
 8002bda:	89a3      	ldrh	r3, [r4, #12]
 8002bdc:	d106      	bne.n	8002bec <__sflush_r+0x60>
 8002bde:	6829      	ldr	r1, [r5, #0]
 8002be0:	291d      	cmp	r1, #29
 8002be2:	d82b      	bhi.n	8002c3c <__sflush_r+0xb0>
 8002be4:	4a28      	ldr	r2, [pc, #160]	@ (8002c88 <__sflush_r+0xfc>)
 8002be6:	410a      	asrs	r2, r1
 8002be8:	07d6      	lsls	r6, r2, #31
 8002bea:	d427      	bmi.n	8002c3c <__sflush_r+0xb0>
 8002bec:	2200      	movs	r2, #0
 8002bee:	6062      	str	r2, [r4, #4]
 8002bf0:	6922      	ldr	r2, [r4, #16]
 8002bf2:	04d9      	lsls	r1, r3, #19
 8002bf4:	6022      	str	r2, [r4, #0]
 8002bf6:	d504      	bpl.n	8002c02 <__sflush_r+0x76>
 8002bf8:	1c42      	adds	r2, r0, #1
 8002bfa:	d101      	bne.n	8002c00 <__sflush_r+0x74>
 8002bfc:	682b      	ldr	r3, [r5, #0]
 8002bfe:	b903      	cbnz	r3, 8002c02 <__sflush_r+0x76>
 8002c00:	6560      	str	r0, [r4, #84]	@ 0x54
 8002c02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c04:	602f      	str	r7, [r5, #0]
 8002c06:	b1b9      	cbz	r1, 8002c38 <__sflush_r+0xac>
 8002c08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c0c:	4299      	cmp	r1, r3
 8002c0e:	d002      	beq.n	8002c16 <__sflush_r+0x8a>
 8002c10:	4628      	mov	r0, r5
 8002c12:	f7ff fbf3 	bl	80023fc <_free_r>
 8002c16:	2300      	movs	r3, #0
 8002c18:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c1a:	e00d      	b.n	8002c38 <__sflush_r+0xac>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	4628      	mov	r0, r5
 8002c20:	47b0      	blx	r6
 8002c22:	4602      	mov	r2, r0
 8002c24:	1c50      	adds	r0, r2, #1
 8002c26:	d1c9      	bne.n	8002bbc <__sflush_r+0x30>
 8002c28:	682b      	ldr	r3, [r5, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0c6      	beq.n	8002bbc <__sflush_r+0x30>
 8002c2e:	2b1d      	cmp	r3, #29
 8002c30:	d001      	beq.n	8002c36 <__sflush_r+0xaa>
 8002c32:	2b16      	cmp	r3, #22
 8002c34:	d11d      	bne.n	8002c72 <__sflush_r+0xe6>
 8002c36:	602f      	str	r7, [r5, #0]
 8002c38:	2000      	movs	r0, #0
 8002c3a:	e021      	b.n	8002c80 <__sflush_r+0xf4>
 8002c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c40:	b21b      	sxth	r3, r3
 8002c42:	e01a      	b.n	8002c7a <__sflush_r+0xee>
 8002c44:	690f      	ldr	r7, [r1, #16]
 8002c46:	2f00      	cmp	r7, #0
 8002c48:	d0f6      	beq.n	8002c38 <__sflush_r+0xac>
 8002c4a:	0793      	lsls	r3, r2, #30
 8002c4c:	bf18      	it	ne
 8002c4e:	2300      	movne	r3, #0
 8002c50:	680e      	ldr	r6, [r1, #0]
 8002c52:	bf08      	it	eq
 8002c54:	694b      	ldreq	r3, [r1, #20]
 8002c56:	1bf6      	subs	r6, r6, r7
 8002c58:	600f      	str	r7, [r1, #0]
 8002c5a:	608b      	str	r3, [r1, #8]
 8002c5c:	2e00      	cmp	r6, #0
 8002c5e:	ddeb      	ble.n	8002c38 <__sflush_r+0xac>
 8002c60:	4633      	mov	r3, r6
 8002c62:	463a      	mov	r2, r7
 8002c64:	4628      	mov	r0, r5
 8002c66:	6a21      	ldr	r1, [r4, #32]
 8002c68:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002c6c:	47e0      	blx	ip
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	dc07      	bgt.n	8002c82 <__sflush_r+0xf6>
 8002c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7e:	81a3      	strh	r3, [r4, #12]
 8002c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c82:	4407      	add	r7, r0
 8002c84:	1a36      	subs	r6, r6, r0
 8002c86:	e7e9      	b.n	8002c5c <__sflush_r+0xd0>
 8002c88:	dfbffffe 	.word	0xdfbffffe

08002c8c <_fflush_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	690b      	ldr	r3, [r1, #16]
 8002c90:	4605      	mov	r5, r0
 8002c92:	460c      	mov	r4, r1
 8002c94:	b913      	cbnz	r3, 8002c9c <_fflush_r+0x10>
 8002c96:	2500      	movs	r5, #0
 8002c98:	4628      	mov	r0, r5
 8002c9a:	bd38      	pop	{r3, r4, r5, pc}
 8002c9c:	b118      	cbz	r0, 8002ca6 <_fflush_r+0x1a>
 8002c9e:	6a03      	ldr	r3, [r0, #32]
 8002ca0:	b90b      	cbnz	r3, 8002ca6 <_fflush_r+0x1a>
 8002ca2:	f7ff faa3 	bl	80021ec <__sinit>
 8002ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f3      	beq.n	8002c96 <_fflush_r+0xa>
 8002cae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002cb0:	07d0      	lsls	r0, r2, #31
 8002cb2:	d404      	bmi.n	8002cbe <_fflush_r+0x32>
 8002cb4:	0599      	lsls	r1, r3, #22
 8002cb6:	d402      	bmi.n	8002cbe <_fflush_r+0x32>
 8002cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cba:	f7ff fb9c 	bl	80023f6 <__retarget_lock_acquire_recursive>
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	f7ff ff63 	bl	8002b8c <__sflush_r>
 8002cc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002cc8:	4605      	mov	r5, r0
 8002cca:	07da      	lsls	r2, r3, #31
 8002ccc:	d4e4      	bmi.n	8002c98 <_fflush_r+0xc>
 8002cce:	89a3      	ldrh	r3, [r4, #12]
 8002cd0:	059b      	lsls	r3, r3, #22
 8002cd2:	d4e1      	bmi.n	8002c98 <_fflush_r+0xc>
 8002cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cd6:	f7ff fb8f 	bl	80023f8 <__retarget_lock_release_recursive>
 8002cda:	e7dd      	b.n	8002c98 <_fflush_r+0xc>

08002cdc <__swbuf_r>:
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	460e      	mov	r6, r1
 8002ce0:	4614      	mov	r4, r2
 8002ce2:	4605      	mov	r5, r0
 8002ce4:	b118      	cbz	r0, 8002cee <__swbuf_r+0x12>
 8002ce6:	6a03      	ldr	r3, [r0, #32]
 8002ce8:	b90b      	cbnz	r3, 8002cee <__swbuf_r+0x12>
 8002cea:	f7ff fa7f 	bl	80021ec <__sinit>
 8002cee:	69a3      	ldr	r3, [r4, #24]
 8002cf0:	60a3      	str	r3, [r4, #8]
 8002cf2:	89a3      	ldrh	r3, [r4, #12]
 8002cf4:	071a      	lsls	r2, r3, #28
 8002cf6:	d501      	bpl.n	8002cfc <__swbuf_r+0x20>
 8002cf8:	6923      	ldr	r3, [r4, #16]
 8002cfa:	b943      	cbnz	r3, 8002d0e <__swbuf_r+0x32>
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f000 f82a 	bl	8002d58 <__swsetup_r>
 8002d04:	b118      	cbz	r0, 8002d0e <__swbuf_r+0x32>
 8002d06:	f04f 37ff 	mov.w	r7, #4294967295
 8002d0a:	4638      	mov	r0, r7
 8002d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	6922      	ldr	r2, [r4, #16]
 8002d12:	b2f6      	uxtb	r6, r6
 8002d14:	1a98      	subs	r0, r3, r2
 8002d16:	6963      	ldr	r3, [r4, #20]
 8002d18:	4637      	mov	r7, r6
 8002d1a:	4283      	cmp	r3, r0
 8002d1c:	dc05      	bgt.n	8002d2a <__swbuf_r+0x4e>
 8002d1e:	4621      	mov	r1, r4
 8002d20:	4628      	mov	r0, r5
 8002d22:	f7ff ffb3 	bl	8002c8c <_fflush_r>
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d1ed      	bne.n	8002d06 <__swbuf_r+0x2a>
 8002d2a:	68a3      	ldr	r3, [r4, #8]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	60a3      	str	r3, [r4, #8]
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	6022      	str	r2, [r4, #0]
 8002d36:	701e      	strb	r6, [r3, #0]
 8002d38:	6962      	ldr	r2, [r4, #20]
 8002d3a:	1c43      	adds	r3, r0, #1
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d004      	beq.n	8002d4a <__swbuf_r+0x6e>
 8002d40:	89a3      	ldrh	r3, [r4, #12]
 8002d42:	07db      	lsls	r3, r3, #31
 8002d44:	d5e1      	bpl.n	8002d0a <__swbuf_r+0x2e>
 8002d46:	2e0a      	cmp	r6, #10
 8002d48:	d1df      	bne.n	8002d0a <__swbuf_r+0x2e>
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	f7ff ff9d 	bl	8002c8c <_fflush_r>
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d0d9      	beq.n	8002d0a <__swbuf_r+0x2e>
 8002d56:	e7d6      	b.n	8002d06 <__swbuf_r+0x2a>

08002d58 <__swsetup_r>:
 8002d58:	b538      	push	{r3, r4, r5, lr}
 8002d5a:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <__swsetup_r+0xa8>)
 8002d5c:	4605      	mov	r5, r0
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	460c      	mov	r4, r1
 8002d62:	b118      	cbz	r0, 8002d6c <__swsetup_r+0x14>
 8002d64:	6a03      	ldr	r3, [r0, #32]
 8002d66:	b90b      	cbnz	r3, 8002d6c <__swsetup_r+0x14>
 8002d68:	f7ff fa40 	bl	80021ec <__sinit>
 8002d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d70:	0719      	lsls	r1, r3, #28
 8002d72:	d422      	bmi.n	8002dba <__swsetup_r+0x62>
 8002d74:	06da      	lsls	r2, r3, #27
 8002d76:	d407      	bmi.n	8002d88 <__swsetup_r+0x30>
 8002d78:	2209      	movs	r2, #9
 8002d7a:	602a      	str	r2, [r5, #0]
 8002d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	81a3      	strh	r3, [r4, #12]
 8002d86:	e033      	b.n	8002df0 <__swsetup_r+0x98>
 8002d88:	0758      	lsls	r0, r3, #29
 8002d8a:	d512      	bpl.n	8002db2 <__swsetup_r+0x5a>
 8002d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d8e:	b141      	cbz	r1, 8002da2 <__swsetup_r+0x4a>
 8002d90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d94:	4299      	cmp	r1, r3
 8002d96:	d002      	beq.n	8002d9e <__swsetup_r+0x46>
 8002d98:	4628      	mov	r0, r5
 8002d9a:	f7ff fb2f 	bl	80023fc <_free_r>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002da8:	81a3      	strh	r3, [r4, #12]
 8002daa:	2300      	movs	r3, #0
 8002dac:	6063      	str	r3, [r4, #4]
 8002dae:	6923      	ldr	r3, [r4, #16]
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	89a3      	ldrh	r3, [r4, #12]
 8002db4:	f043 0308 	orr.w	r3, r3, #8
 8002db8:	81a3      	strh	r3, [r4, #12]
 8002dba:	6923      	ldr	r3, [r4, #16]
 8002dbc:	b94b      	cbnz	r3, 8002dd2 <__swsetup_r+0x7a>
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc8:	d003      	beq.n	8002dd2 <__swsetup_r+0x7a>
 8002dca:	4621      	mov	r1, r4
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f000 f85c 	bl	8002e8a <__smakebuf_r>
 8002dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dd6:	f013 0201 	ands.w	r2, r3, #1
 8002dda:	d00a      	beq.n	8002df2 <__swsetup_r+0x9a>
 8002ddc:	2200      	movs	r2, #0
 8002dde:	60a2      	str	r2, [r4, #8]
 8002de0:	6962      	ldr	r2, [r4, #20]
 8002de2:	4252      	negs	r2, r2
 8002de4:	61a2      	str	r2, [r4, #24]
 8002de6:	6922      	ldr	r2, [r4, #16]
 8002de8:	b942      	cbnz	r2, 8002dfc <__swsetup_r+0xa4>
 8002dea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002dee:	d1c5      	bne.n	8002d7c <__swsetup_r+0x24>
 8002df0:	bd38      	pop	{r3, r4, r5, pc}
 8002df2:	0799      	lsls	r1, r3, #30
 8002df4:	bf58      	it	pl
 8002df6:	6962      	ldrpl	r2, [r4, #20]
 8002df8:	60a2      	str	r2, [r4, #8]
 8002dfa:	e7f4      	b.n	8002de6 <__swsetup_r+0x8e>
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	e7f7      	b.n	8002df0 <__swsetup_r+0x98>
 8002e00:	20000018 	.word	0x20000018

08002e04 <_sbrk_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	2300      	movs	r3, #0
 8002e08:	4d05      	ldr	r5, [pc, #20]	@ (8002e20 <_sbrk_r+0x1c>)
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	602b      	str	r3, [r5, #0]
 8002e10:	f7fe f9da 	bl	80011c8 <_sbrk>
 8002e14:	1c43      	adds	r3, r0, #1
 8002e16:	d102      	bne.n	8002e1e <_sbrk_r+0x1a>
 8002e18:	682b      	ldr	r3, [r5, #0]
 8002e1a:	b103      	cbz	r3, 8002e1e <_sbrk_r+0x1a>
 8002e1c:	6023      	str	r3, [r4, #0]
 8002e1e:	bd38      	pop	{r3, r4, r5, pc}
 8002e20:	2000043c 	.word	0x2000043c

08002e24 <memchr>:
 8002e24:	4603      	mov	r3, r0
 8002e26:	b510      	push	{r4, lr}
 8002e28:	b2c9      	uxtb	r1, r1
 8002e2a:	4402      	add	r2, r0
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	d101      	bne.n	8002e36 <memchr+0x12>
 8002e32:	2000      	movs	r0, #0
 8002e34:	e003      	b.n	8002e3e <memchr+0x1a>
 8002e36:	7804      	ldrb	r4, [r0, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	428c      	cmp	r4, r1
 8002e3c:	d1f6      	bne.n	8002e2c <memchr+0x8>
 8002e3e:	bd10      	pop	{r4, pc}

08002e40 <__swhatbuf_r>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	460c      	mov	r4, r1
 8002e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e48:	4615      	mov	r5, r2
 8002e4a:	2900      	cmp	r1, #0
 8002e4c:	461e      	mov	r6, r3
 8002e4e:	b096      	sub	sp, #88	@ 0x58
 8002e50:	da0c      	bge.n	8002e6c <__swhatbuf_r+0x2c>
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	2100      	movs	r1, #0
 8002e56:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002e5a:	bf14      	ite	ne
 8002e5c:	2340      	movne	r3, #64	@ 0x40
 8002e5e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002e62:	2000      	movs	r0, #0
 8002e64:	6031      	str	r1, [r6, #0]
 8002e66:	602b      	str	r3, [r5, #0]
 8002e68:	b016      	add	sp, #88	@ 0x58
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	466a      	mov	r2, sp
 8002e6e:	f000 f849 	bl	8002f04 <_fstat_r>
 8002e72:	2800      	cmp	r0, #0
 8002e74:	dbed      	blt.n	8002e52 <__swhatbuf_r+0x12>
 8002e76:	9901      	ldr	r1, [sp, #4]
 8002e78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002e7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002e80:	4259      	negs	r1, r3
 8002e82:	4159      	adcs	r1, r3
 8002e84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e88:	e7eb      	b.n	8002e62 <__swhatbuf_r+0x22>

08002e8a <__smakebuf_r>:
 8002e8a:	898b      	ldrh	r3, [r1, #12]
 8002e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e8e:	079d      	lsls	r5, r3, #30
 8002e90:	4606      	mov	r6, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	d507      	bpl.n	8002ea6 <__smakebuf_r+0x1c>
 8002e96:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002e9a:	6023      	str	r3, [r4, #0]
 8002e9c:	6123      	str	r3, [r4, #16]
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	6163      	str	r3, [r4, #20]
 8002ea2:	b003      	add	sp, #12
 8002ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea6:	466a      	mov	r2, sp
 8002ea8:	ab01      	add	r3, sp, #4
 8002eaa:	f7ff ffc9 	bl	8002e40 <__swhatbuf_r>
 8002eae:	9f00      	ldr	r7, [sp, #0]
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	4639      	mov	r1, r7
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f7ff fb0b 	bl	80024d0 <_malloc_r>
 8002eba:	b948      	cbnz	r0, 8002ed0 <__smakebuf_r+0x46>
 8002ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ec0:	059a      	lsls	r2, r3, #22
 8002ec2:	d4ee      	bmi.n	8002ea2 <__smakebuf_r+0x18>
 8002ec4:	f023 0303 	bic.w	r3, r3, #3
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	81a3      	strh	r3, [r4, #12]
 8002ece:	e7e2      	b.n	8002e96 <__smakebuf_r+0xc>
 8002ed0:	89a3      	ldrh	r3, [r4, #12]
 8002ed2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eda:	81a3      	strh	r3, [r4, #12]
 8002edc:	9b01      	ldr	r3, [sp, #4]
 8002ede:	6020      	str	r0, [r4, #0]
 8002ee0:	b15b      	cbz	r3, 8002efa <__smakebuf_r+0x70>
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ee8:	f000 f81e 	bl	8002f28 <_isatty_r>
 8002eec:	b128      	cbz	r0, 8002efa <__smakebuf_r+0x70>
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	f023 0303 	bic.w	r3, r3, #3
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	81a3      	strh	r3, [r4, #12]
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	431d      	orrs	r5, r3
 8002efe:	81a5      	strh	r5, [r4, #12]
 8002f00:	e7cf      	b.n	8002ea2 <__smakebuf_r+0x18>
	...

08002f04 <_fstat_r>:
 8002f04:	b538      	push	{r3, r4, r5, lr}
 8002f06:	2300      	movs	r3, #0
 8002f08:	4d06      	ldr	r5, [pc, #24]	@ (8002f24 <_fstat_r+0x20>)
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	602b      	str	r3, [r5, #0]
 8002f12:	f7fe f933 	bl	800117c <_fstat>
 8002f16:	1c43      	adds	r3, r0, #1
 8002f18:	d102      	bne.n	8002f20 <_fstat_r+0x1c>
 8002f1a:	682b      	ldr	r3, [r5, #0]
 8002f1c:	b103      	cbz	r3, 8002f20 <_fstat_r+0x1c>
 8002f1e:	6023      	str	r3, [r4, #0]
 8002f20:	bd38      	pop	{r3, r4, r5, pc}
 8002f22:	bf00      	nop
 8002f24:	2000043c 	.word	0x2000043c

08002f28 <_isatty_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4d05      	ldr	r5, [pc, #20]	@ (8002f44 <_isatty_r+0x1c>)
 8002f2e:	4604      	mov	r4, r0
 8002f30:	4608      	mov	r0, r1
 8002f32:	602b      	str	r3, [r5, #0]
 8002f34:	f7fe f931 	bl	800119a <_isatty>
 8002f38:	1c43      	adds	r3, r0, #1
 8002f3a:	d102      	bne.n	8002f42 <_isatty_r+0x1a>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	b103      	cbz	r3, 8002f42 <_isatty_r+0x1a>
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	bd38      	pop	{r3, r4, r5, pc}
 8002f44:	2000043c 	.word	0x2000043c

08002f48 <_init>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	bf00      	nop
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr

08002f54 <_fini>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	bf00      	nop
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr
